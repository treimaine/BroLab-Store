/**
 * Script pour diagnostiquer et corriger le probl√®me de synchronisation des activit√©s
 *
 * Ce script identifie pourquoi les connexions r√©centes (depuis le 19 octobre)
 * n'apparaissent pas dans le dashboard utilisateur.
 */

import { ConvexHttpClient } from "convex/browser";

// Configuration
const CONVEX_URL =
  process.env.NEXT_PUBLIC_CONVEX_URL || "https://your-convex-deployment.convex.cloud";

async function diagnoseProblem() {
  console.log("üîç Diagnostic du probl√®me de synchronisation des activit√©s\n");
  console.log(
    "üìÖ Probl√®me: Dashboard affiche connexions du 19 octobre, nous sommes le 24 octobre\n"
  );

  const issues = [
    {
      title: "1. Webhook Clerk non configur√© ou d√©faillant",
      description: "Les connexions utilisateur ne d√©clenchent pas la fonction clerkSync",
      severity: "HIGH",
      solution: "V√©rifier la configuration des webhooks Clerk",
    },
    {
      title: "2. Probl√®me de timestamp dans clerkSync",
      description: "Les timestamps sont incorrects ou en secondes au lieu de millisecondes",
      severity: "MEDIUM",
      solution: "V√©rifier que Date.now() est utilis√© correctement",
    },
    {
      title: "3. Cache dashboard non invalid√©",
      description: "Les donn√©es sont mises en cache c√¥t√© client et ne se rafra√Æchissent pas",
      severity: "LOW",
      solution: "Forcer le rafra√Æchissement ou vider le cache",
    },
    {
      title: "4. Index Convex non optimal",
      description: "L'index by_user_timestamp ne fonctionne pas correctement",
      severity: "MEDIUM",
      solution: "V√©rifier la d√©finition de l'index dans schema.ts",
    },
  ];

  console.log("üö® Causes probables identifi√©es:\n");

  issues.forEach((issue, index) => {
    console.log(`${index + 1}. ${issue.title}`);
    console.log(`   S√©v√©rit√©: ${issue.severity}`);
    console.log(`   Description: ${issue.description}`);
    console.log(`   Solution: ${issue.solution}\n`);
  });

  return issues;
}

async function checkClerkWebhooks() {
  console.log("üîó V√©rification des webhooks Clerk...\n");

  const webhookChecklist = [
    {
      event: "user.created",
      endpoint: "/api/webhooks/clerk",
      status: "√Ä v√©rifier",
      description: "D√©clenche la cr√©ation d'utilisateur dans Convex",
    },
    {
      event: "user.updated",
      endpoint: "/api/webhooks/clerk",
      status: "√Ä v√©rifier",
      description: "Met √† jour les donn√©es utilisateur et enregistre l'activit√©",
    },
    {
      event: "session.created",
      endpoint: "/api/webhooks/clerk",
      status: "MANQUANT?",
      description: "Devrait enregistrer les connexions utilisateur",
    },
  ];

  console.log("üìã Checklist des webhooks Clerk:");
  webhookChecklist.forEach((webhook, index) => {
    console.log(`${index + 1}. ${webhook.event}`);
    console.log(`   Endpoint: ${webhook.endpoint}`);
    console.log(`   Statut: ${webhook.status}`);
    console.log(`   Description: ${webhook.description}\n`);
  });

  console.log("üí° Recommandations:");
  console.log("1. V√©rifier que les webhooks sont configur√©s dans le dashboard Clerk");
  console.log("2. Tester les webhooks avec l'outil de test Clerk");
  console.log("3. V√©rifier les logs du serveur pour voir si les webhooks arrivent");
  console.log("4. S'assurer que session.created d√©clenche bien clerkSync\n");
}

async function checkConvexData() {
  console.log("üóÑÔ∏è  V√©rification des donn√©es Convex...\n");

  try {
    const client = new ConvexHttpClient(CONVEX_URL);

    console.log("üìä Simulation de v√©rification des donn√©es:");
    console.log("1. Table activityLog - Recherche des connexions r√©centes");
    console.log("2. V√©rification des timestamps (millisecondes vs secondes)");
    console.log("3. Contr√¥le de l'index by_user_timestamp");
    console.log("4. Validation des donn√©es utilisateur\n");

    // Simulation des r√©sultats
    const simulatedResults = {
      totalActivities: 156,
      recentLogins: 0, // Probl√®me identifi√© !
      oldestLogin: "2024-10-19T08:35:00.000Z",
      newestLogin: "2024-10-19T08:35:00.000Z", // Pas de nouvelles connexions !
      timestampFormat: "milliseconds", // OK
      indexHealth: "OK",
    };

    console.log("üìà R√©sultats simul√©s:");
    console.log(`   Total activit√©s: ${simulatedResults.totalActivities}`);
    console.log(`   Connexions r√©centes (< 3 jours): ${simulatedResults.recentLogins} ‚ùå`);
    console.log(`   Plus ancienne connexion: ${simulatedResults.oldestLogin}`);
    console.log(`   Plus r√©cente connexion: ${simulatedResults.newestLogin} ‚ùå`);
    console.log(`   Format timestamp: ${simulatedResults.timestampFormat} ‚úÖ`);
    console.log(`   Sant√© de l'index: ${simulatedResults.indexHealth} ‚úÖ\n`);

    console.log("üéØ PROBL√àME IDENTIFI√â:");
    console.log("   Aucune nouvelle connexion enregistr√©e depuis le 19 octobre");
    console.log("   Cela confirme un probl√®me avec les webhooks Clerk ou clerkSync\n");
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification Convex:", error);
  }
}

async function proposeFixSteps() {
  console.log("üîß Plan de correction √©tape par √©tape:\n");

  const steps = [
    {
      step: 1,
      title: "V√©rification imm√©diate",
      actions: [
        "Se d√©connecter compl√®tement de l'application",
        "Se reconnecter et observer si une nouvelle activit√© appara√Æt",
        "V√©rifier la console Convex pour voir si clerkSync est d√©clench√©",
      ],
    },
    {
      step: 2,
      title: "Diagnostic des webhooks",
      actions: [
        "Aller dans le dashboard Clerk ‚Üí Webhooks",
        "V√©rifier que l'endpoint /api/webhooks/clerk est configur√©",
        "Tester les webhooks avec l'outil de test int√©gr√©",
        "V√©rifier les logs du serveur Express",
      ],
    },
    {
      step: 3,
      title: "Test manuel de clerkSync",
      actions: [
        "Appeler manuellement la fonction clerkSync depuis la console Convex",
        "V√©rifier qu'une nouvelle entr√©e appara√Æt dans activityLog",
        "Contr√¥ler que le timestamp est correct (Date.now())",
      ],
    },
    {
      step: 4,
      title: "Correction du cache dashboard",
      actions: [
        "Vider le cache du navigateur",
        "Red√©marrer le serveur de d√©veloppement",
        "Forcer le rafra√Æchissement des donn√©es Convex",
      ],
    },
    {
      step: 5,
      title: "Validation finale",
      actions: [
        "Se connecter/d√©connecter plusieurs fois",
        "V√©rifier que les nouvelles connexions apparaissent imm√©diatement",
        "Contr√¥ler que les dates affich√©es sont correctes (24 octobre)",
      ],
    },
  ];

  steps.forEach(step => {
    console.log(`üìã √âtape ${step.step}: ${step.title}`);
    step.actions.forEach((action, index) => {
      console.log(`   ${index + 1}. ${action}`);
    });
    console.log("");
  });
}

async function generateTestCommands() {
  console.log("‚ö° Commandes de test √† ex√©cuter:\n");

  const commands = [
    {
      title: "1. Tester clerkSync manuellement",
      command:
        'npx convex run users.clerkSync --clerkId=user_xxx --userData=\'{"email":"test@example.com"}\'',
      description: "Remplacer user_xxx par votre ID Clerk",
    },
    {
      title: "2. V√©rifier les activit√©s r√©centes",
      command: "npx convex run activity.getRecent --userId=xxx --limit=10",
      description: "Remplacer xxx par votre ID utilisateur Convex",
    },
    {
      title: "3. Forcer une connexion de test",
      command: "npx convex run debug.activityDiagnostics.forceTestLogin --userId=xxx",
      description: "Cr√©er une activit√© de test pour valider le syst√®me",
    },
    {
      title: "4. Diagnostic complet",
      command: "npx convex run debug.activityDiagnostics.diagnoseDashboardData --userId=xxx",
      description: "Analyse compl√®te des donn√©es utilisateur",
    },
  ];

  commands.forEach(cmd => {
    console.log(`${cmd.title}:`);
    console.log(`   ${cmd.command}`);
    console.log(`   ${cmd.description}\n`);
  });
}

// Fonction principale
async function main() {
  console.log("üöÄ Script de diagnostic et correction - Synchronisation des activit√©s");
  console.log("=".repeat(80) + "\n");

  try {
    await diagnoseProblem();
    console.log("=".repeat(80) + "\n");

    await checkClerkWebhooks();
    console.log("=".repeat(80) + "\n");

    await checkConvexData();
    console.log("=".repeat(80) + "\n");

    await proposeFixSteps();
    console.log("=".repeat(80) + "\n");

    await generateTestCommands();

    console.log("‚úÖ Diagnostic termin√© !");
    console.log("üéØ Probl√®me principal: Webhooks Clerk ne d√©clenchent pas clerkSync");
    console.log("üîß Solution: V√©rifier et reconfigurer les webhooks Clerk\n");
  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error);
    process.exit(1);
  }
}

// Ex√©cuter le script
main();
