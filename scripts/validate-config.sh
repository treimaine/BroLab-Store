#!/bin/bash

# Script de validation automatique apr√®s configuration
# Utilisation: ./scripts/validate-config.sh

echo "üîç Validation post-configuration..."
echo "=================================="

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de v√©rification TypeScript
check_typescript() {
    echo -e "\nüìù V√©rification TypeScript..."
    
    # Essayer d'abord notre v√©rificateur personnalis√© (plus rapide)
    if [ -f "scripts/check-typescript-errors.cjs" ]; then
        if node scripts/check-typescript-errors.cjs; then
            echo -e "${GREEN}‚úÖ TypeScript: Aucune erreur critique d√©tect√©e${NC}"
            return 0
        else
            echo -e "${RED}‚ùå TypeScript: Erreurs d√©tect√©es par le v√©rificateur personnalis√©${NC}"
            return 1
        fi
    # Sinon utiliser tsc si disponible
    elif [ -f "node_modules/.bin/tsc" ]; then
        if node_modules/.bin/tsc --noEmit; then
            echo -e "${GREEN}‚úÖ TypeScript: Compilation r√©ussie${NC}"
            return 0
        else
            echo -e "${RED}‚ùå TypeScript: Erreurs de compilation d√©tect√©es${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  TypeScript: Skipp√© (tsc non disponible)${NC}"
        return 0
    fi
}

# Fonction de v√©rification des tests
check_tests() {
    echo -e "\nüß™ V√©rification des tests..."
    
    if [ -f "node_modules/.bin/jest" ]; then
        if npm test --silent; then
            echo -e "${GREEN}‚úÖ Tests: Tous les tests passent${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Tests: √âchecs d√©tect√©s${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Tests: Skipped - d√©pendances non install√©es${NC}"
        return 0
    fi
}

# Fonction de v√©rification de la syntaxe des fichiers config
check_config_syntax() {
    echo -e "\n‚öôÔ∏è  V√©rification syntaxe des configurations..."
    
    # V√©rifier tsconfig.json
    if node -e "JSON.parse(require('fs').readFileSync('tsconfig.json', 'utf8'))" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ tsconfig.json: Syntaxe valide${NC}"
    else
        echo -e "${RED}‚ùå tsconfig.json: Syntaxe invalide${NC}"
        return 1
    fi
    
    # V√©rifier tsconfig.test.json si existe
    if [ -f "tsconfig.test.json" ]; then
        if node -e "JSON.parse(require('fs').readFileSync('tsconfig.test.json', 'utf8'))" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ tsconfig.test.json: Syntaxe valide${NC}"
        else
            echo -e "${RED}‚ùå tsconfig.test.json: Syntaxe invalide${NC}"
            return 1
        fi
    fi
    
    # V√©rifier package.json
    if node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ package.json: Syntaxe valide${NC}"
    else
        echo -e "${RED}‚ùå package.json: Syntaxe invalide${NC}"
        return 1
    fi
}

# Ex√©cution des v√©rifications
main() {
    local exit_code=0
    
    check_config_syntax || exit_code=1
    check_typescript || exit_code=1
    check_tests || exit_code=1
    
    echo -e "\n=================================="
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}üéâ Validation r√©ussie! Configuration OK${NC}"
    else
        echo -e "${RED}üí• Validation √©chou√©e! V√©rifiez les erreurs ci-dessus${NC}"
    fi
    echo "=================================="
    
    return $exit_code
}

# Point d'entr√©e
main "$@"