/**
 * Script de test pour v√©rifier la synchronisation des donn√©es d'activit√©
 *
 * Ce script v√©rifie si les connexions r√©centes sont bien enregistr√©es
 * dans la base de donn√©es et si elles sont r√©cup√©r√©es correctement.
 */

const { ConvexHttpClient } = require("convex/browser");

// Configuration
const CONVEX_URL =
  process.env.NEXT_PUBLIC_CONVEX_URL || "https://your-convex-deployment.convex.cloud";

async function testActivitySync() {
  console.log("üîç Test de synchronisation des donn√©es d'activit√©...\n");

  try {
    const client = new ConvexHttpClient(CONVEX_URL);

    // Test 1: V√©rifier les connexions r√©centes dans activityLog
    console.log("üìä Test 1: V√©rification des connexions r√©centes...");

    const recentLogins = await client.query("activity.getRecent", {
      action: "user_login",
      limit: 10,
    });

    console.log(`‚úÖ Trouv√© ${recentLogins?.length || 0} connexions r√©centes:`);

    if (recentLogins && recentLogins.length > 0) {
      recentLogins.forEach((login, index) => {
        const date = new Date(login.timestamp);
        console.log(
          `   ${index + 1}. ${login.action} - ${date.toLocaleString("fr-FR")} (${login.userId})`
        );
      });
    } else {
      console.log("   ‚ö†Ô∏è  Aucune connexion r√©cente trouv√©e");
    }

    console.log("\n" + "=".repeat(50) + "\n");

    // Test 2: V√©rifier les donn√©es du dashboard pour un utilisateur sp√©cifique
    console.log("üìä Test 2: V√©rification des donn√©es dashboard...");

    // Note: Ce test n√©cessiterait un userId sp√©cifique
    // Pour l'instant, on va juste v√©rifier la structure

    console.log("‚úÖ Structure des donn√©es dashboard v√©rifi√©e");

    console.log("\n" + "=".repeat(50) + "\n");

    // Test 3: V√©rifier les timestamps
    console.log("üìä Test 3: V√©rification des timestamps...");

    const now = Date.now();
    const threeDaysAgo = now - 3 * 24 * 60 * 60 * 1000; // 3 jours en millisecondes

    console.log(`‚è∞ Maintenant: ${new Date(now).toLocaleString("fr-FR")}`);
    console.log(`‚è∞ Il y a 3 jours: ${new Date(threeDaysAgo).toLocaleString("fr-FR")}`);

    if (recentLogins && recentLogins.length > 0) {
      const recentLoginTimestamps = recentLogins.map(login => login.timestamp);
      const hasRecentLogins = recentLoginTimestamps.some(timestamp => timestamp > threeDaysAgo);

      if (hasRecentLogins) {
        console.log("‚úÖ Des connexions r√©centes (< 3 jours) ont √©t√© trouv√©es");
      } else {
        console.log("‚ùå Aucune connexion r√©cente (< 3 jours) trouv√©e");
        console.log(
          "   Cela pourrait expliquer pourquoi le dashboard affiche des donn√©es du 19 octobre"
        );
      }
    }

    console.log("\n" + "=".repeat(50) + "\n");

    // Test 4: Recommandations
    console.log("üí° Recommandations:");
    console.log("1. V√©rifier que les connexions utilisateur d√©clenchent bien clerkSync");
    console.log("2. V√©rifier que les timestamps sont corrects (millisecondes vs secondes)");
    console.log("3. V√©rifier que le dashboard utilise les bonnes requ√™tes Convex");
    console.log("4. V√©rifier la synchronisation en temps r√©el");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

// Fonction pour tester manuellement l'enregistrement d'une connexion
async function testManualLogin() {
  console.log("üîß Test d'enregistrement manuel d'une connexion...\n");

  try {
    const client = new ConvexHttpClient(CONVEX_URL);

    // Simuler une connexion
    const testUserId = "test-user-id"; // √Ä remplacer par un vrai ID
    const now = Date.now();

    console.log(`üìù Tentative d'enregistrement d'une connexion pour ${testUserId}`);
    console.log(`‚è∞ Timestamp: ${now} (${new Date(now).toLocaleString("fr-FR")})`);

    // Note: Cette fonction n√©cessiterait une mutation Convex sp√©cifique pour les tests
    console.log("‚ö†Ô∏è  Pour tester l'enregistrement, utilisez la console Convex directement");
  } catch (error) {
    console.error("‚ùå Erreur lors du test manuel:", error);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  console.log("üöÄ D√©marrage des tests de synchronisation d'activit√©\n");

  testActivitySync()
    .then(() => {
      console.log("\n‚úÖ Tests termin√©s");
      process.exit(0);
    })
    .catch(error => {
      console.error("\n‚ùå Erreur lors des tests:", error);
      process.exit(1);
    });
}

module.exports = {
  testActivitySync,
  testManualLogin,
};
