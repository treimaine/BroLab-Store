/**
 * HTTP Status Code Constants for BroLab Entertainment API
 *
 * This module provides standardized HTTP status codes and their meanings
 * for consistent API responses across all endpoints.
 */

/**
 * HTTP Status Codes
 */
export const HTTP_STATUS = {
  // Success responses (2xx)
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NO_CONTENT: 204,

  // Redirection responses (3xx)
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  NOT_MODIFIED: 304,

  // Client error responses (4xx)
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION_FAILED: 412,
  PAYLOAD_TOO_LARGE: 413,
  URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIA_TYPE: 415,
  RANGE_NOT_SATISFIABLE: 416,
  EXPECTATION_FAILED: 417,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,

  // Server error responses (5xx)
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  HTTP_VERSION_NOT_SUPPORTED: 505,
} as const;

/**
 * Status code type
 */
export type HttpStatusCode = (typeof HTTP_STATUS)[keyof typeof HTTP_STATUS];

/**
 * Status code categories
 */
export const STATUS_CATEGORIES = {
  SUCCESS: (code: number): boolean => code >= 200 && code < 300,
  REDIRECT: (code: number): boolean => code >= 300 && code < 400,
  CLIENT_ERROR: (code: number): boolean => code >= 400 && code < 500,
  SERVER_ERROR: (code: number): boolean => code >= 500 && code < 600,
} as const;

/**
 * Status code descriptions
 */
export const STATUS_DESCRIPTIONS: Record<HttpStatusCode, string> = {
  [HTTP_STATUS.OK]: "OK",
  [HTTP_STATUS.CREATED]: "Created",
  [HTTP_STATUS.ACCEPTED]: "Accepted",
  [HTTP_STATUS.NO_CONTENT]: "No Content",
  [HTTP_STATUS.MOVED_PERMANENTLY]: "Moved Permanently",
  [HTTP_STATUS.FOUND]: "Found",
  [HTTP_STATUS.NOT_MODIFIED]: "Not Modified",
  [HTTP_STATUS.BAD_REQUEST]: "Bad Request",
  [HTTP_STATUS.UNAUTHORIZED]: "Unauthorized",
  [HTTP_STATUS.PAYMENT_REQUIRED]: "Payment Required",
  [HTTP_STATUS.FORBIDDEN]: "Forbidden",
  [HTTP_STATUS.NOT_FOUND]: "Not Found",
  [HTTP_STATUS.METHOD_NOT_ALLOWED]: "Method Not Allowed",
  [HTTP_STATUS.NOT_ACCEPTABLE]: "Not Acceptable",
  [HTTP_STATUS.REQUEST_TIMEOUT]: "Request Timeout",
  [HTTP_STATUS.CONFLICT]: "Conflict",
  [HTTP_STATUS.GONE]: "Gone",
  [HTTP_STATUS.LENGTH_REQUIRED]: "Length Required",
  [HTTP_STATUS.PRECONDITION_FAILED]: "Precondition Failed",
  [HTTP_STATUS.PAYLOAD_TOO_LARGE]: "Payload Too Large",
  [HTTP_STATUS.URI_TOO_LONG]: "URI Too Long",
  [HTTP_STATUS.UNSUPPORTED_MEDIA_TYPE]: "Unsupported Media Type",
  [HTTP_STATUS.RANGE_NOT_SATISFIABLE]: "Range Not Satisfiable",
  [HTTP_STATUS.EXPECTATION_FAILED]: "Expectation Failed",
  [HTTP_STATUS.UNPROCESSABLE_ENTITY]: "Unprocessable Entity",
  [HTTP_STATUS.TOO_MANY_REQUESTS]: "Too Many Requests",
  [HTTP_STATUS.INTERNAL_SERVER_ERROR]: "Internal Server Error",
  [HTTP_STATUS.NOT_IMPLEMENTED]: "Not Implemented",
  [HTTP_STATUS.BAD_GATEWAY]: "Bad Gateway",
  [HTTP_STATUS.SERVICE_UNAVAILABLE]: "Service Unavailable",
  [HTTP_STATUS.GATEWAY_TIMEOUT]: "Gateway Timeout",
  [HTTP_STATUS.HTTP_VERSION_NOT_SUPPORTED]: "HTTP Version Not Supported",
} as const;

/**
 * BroLab-specific status code mappings for business errors
 */
export const BROLAB_STATUS_MAPPING = {
  // Authentication & Authorization
  INVALID_CREDENTIALS: HTTP_STATUS.UNAUTHORIZED,
  SESSION_EXPIRED: HTTP_STATUS.UNAUTHORIZED,
  INSUFFICIENT_PERMISSIONS: HTTP_STATUS.FORBIDDEN,
  ACCOUNT_SUSPENDED: HTTP_STATUS.FORBIDDEN,
  EMAIL_NOT_VERIFIED: HTTP_STATUS.UNAUTHORIZED,

  // Beat Licensing
  LICENSE_NOT_AVAILABLE: HTTP_STATUS.CONFLICT,
  BEAT_NOT_FOUND: HTTP_STATUS.NOT_FOUND,
  BEAT_UNAVAILABLE: HTTP_STATUS.CONFLICT,
  EXCLUSIVE_BEAT_SOLD: HTTP_STATUS.GONE,
  INVALID_LICENSE_TYPE: HTTP_STATUS.BAD_REQUEST,
  LICENSE_TERMS_VIOLATION: HTTP_STATUS.FORBIDDEN,

  // Payment Processing
  PAYMENT_FAILED: HTTP_STATUS.PAYMENT_REQUIRED,
  INSUFFICIENT_FUNDS: HTTP_STATUS.PAYMENT_REQUIRED,
  CARD_DECLINED: HTTP_STATUS.PAYMENT_REQUIRED,
  PAYMENT_METHOD_INVALID: HTTP_STATUS.BAD_REQUEST,
  CURRENCY_NOT_SUPPORTED: HTTP_STATUS.BAD_REQUEST,
  REFUND_FAILED: HTTP_STATUS.UNPROCESSABLE_ENTITY,
  SUBSCRIPTION_PAYMENT_FAILED: HTTP_STATUS.PAYMENT_REQUIRED,

  // Audio Processing
  AUDIO_FILE_CORRUPT: HTTP_STATUS.UNPROCESSABLE_ENTITY,
  AUDIO_FORMAT_UNSUPPORTED: HTTP_STATUS.UNSUPPORTED_MEDIA_TYPE,
  WAVEFORM_GENERATION_FAILED: HTTP_STATUS.UNPROCESSABLE_ENTITY,
  AUDIO_PROCESSING_TIMEOUT: HTTP_STATUS.REQUEST_TIMEOUT,
  AUDIO_QUALITY_INSUFFICIENT: HTTP_STATUS.UNPROCESSABLE_ENTITY,

  // Download & Quota
  DOWNLOAD_QUOTA_EXCEEDED: HTTP_STATUS.TOO_MANY_REQUESTS,
  DOWNLOAD_LINK_EXPIRED: HTTP_STATUS.GONE,
  FILE_NOT_FOUND: HTTP_STATUS.NOT_FOUND,
  DOWNLOAD_FAILED: HTTP_STATUS.INTERNAL_SERVER_ERROR,
  CONCURRENT_DOWNLOAD_LIMIT: HTTP_STATUS.TOO_MANY_REQUESTS,

  // Studio Booking
  BOOKING_CONFLICT: HTTP_STATUS.CONFLICT,
  STUDIO_UNAVAILABLE: HTTP_STATUS.SERVICE_UNAVAILABLE,
  BOOKING_CANCELLED: HTTP_STATUS.GONE,
  SERVICE_NOT_AVAILABLE: HTTP_STATUS.SERVICE_UNAVAILABLE,
  BOOKING_DEADLINE_PASSED: HTTP_STATUS.GONE,

  // File Upload
  FILE_TOO_LARGE: HTTP_STATUS.PAYLOAD_TOO_LARGE,
  FILE_TYPE_NOT_ALLOWED: HTTP_STATUS.UNSUPPORTED_MEDIA_TYPE,
  VIRUS_DETECTED: HTTP_STATUS.UNPROCESSABLE_ENTITY,
  UPLOAD_FAILED: HTTP_STATUS.INTERNAL_SERVER_ERROR,
  STORAGE_QUOTA_EXCEEDED: HTTP_STATUS.PAYLOAD_TOO_LARGE,

  // Subscription
  SUBSCRIPTION_EXPIRED: HTTP_STATUS.PAYMENT_REQUIRED,
  SUBSCRIPTION_CANCELLED: HTTP_STATUS.FORBIDDEN,
  PLAN_NOT_FOUND: HTTP_STATUS.NOT_FOUND,
  UPGRADE_FAILED: HTTP_STATUS.UNPROCESSABLE_ENTITY,
  DOWNGRADE_RESTRICTED: HTTP_STATUS.FORBIDDEN,

  // Business Logic
  CART_EMPTY: HTTP_STATUS.BAD_REQUEST,
  ITEM_OUT_OF_STOCK: HTTP_STATUS.CONFLICT,
  PRICE_CHANGED: HTTP_STATUS.CONFLICT,
  PROMOTIONAL_CODE_INVALID: HTTP_STATUS.BAD_REQUEST,
  WISHLIST_FULL: HTTP_STATUS.CONFLICT,

  // System Errors
  DATABASE_ERROR: HTTP_STATUS.INTERNAL_SERVER_ERROR,
  EXTERNAL_SERVICE_ERROR: HTTP_STATUS.SERVICE_UNAVAILABLE,
  RATE_LIMIT_EXCEEDED: HTTP_STATUS.TOO_MANY_REQUESTS,
  MAINTENANCE_MODE: HTTP_STATUS.SERVICE_UNAVAILABLE,
  FEATURE_DISABLED: HTTP_STATUS.SERVICE_UNAVAILABLE,

  // Validation Errors
  VALIDATION_ERROR: HTTP_STATUS.BAD_REQUEST,
  INVALID_INPUT: HTTP_STATUS.BAD_REQUEST,
  MISSING_REQUIRED_FIELD: HTTP_STATUS.BAD_REQUEST,

  // API Errors
  API_ERROR: HTTP_STATUS.INTERNAL_SERVER_ERROR,
  INTERNAL_ERROR: HTTP_STATUS.INTERNAL_SERVER_ERROR,
  NOT_FOUND: HTTP_STATUS.NOT_FOUND,
  UNAUTHORIZED: HTTP_STATUS.UNAUTHORIZED,
  FORBIDDEN: HTTP_STATUS.FORBIDDEN,
} as const;

/**
 * Get HTTP status code for BroLab error type
 */
export function getStatusCodeForErrorType(errorType: string): HttpStatusCode {
  return (
    BROLAB_STATUS_MAPPING[errorType as keyof typeof BROLAB_STATUS_MAPPING] ||
    HTTP_STATUS.INTERNAL_SERVER_ERROR
  );
}

/**
 * Check if status code indicates success
 */
export function isSuccessStatus(statusCode: number): boolean {
  return STATUS_CATEGORIES.SUCCESS(statusCode);
}

/**
 * Check if status code indicates client error
 */
export function isClientError(statusCode: number): boolean {
  return STATUS_CATEGORIES.CLIENT_ERROR(statusCode);
}

/**
 * Check if status code indicates server error
 */
export function isServerError(statusCode: number): boolean {
  return STATUS_CATEGORIES.SERVER_ERROR(statusCode);
}

/**
 * Get status description
 */
export function getStatusDescription(statusCode: HttpStatusCode): string {
  return STATUS_DESCRIPTIONS[statusCode] || "Unknown Status";
}
