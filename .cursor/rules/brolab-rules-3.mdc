---
alwaysApply: true
---

# Phase 2 - Continuation Reconstruction Dashboard BroLab

_Mise √† jour : 23 janvier 2025_

## üìä √âtat Actuel Phase 2

### ‚úÖ Accomplissements Phase 2 R√©alis√©s

#### Migration Base de Donn√©es (Phase 1 Compl√©t√©e)

- ‚úÖ **Migration Supabase ‚Üí Convex** : Sch√©mas complets migr√©s
- ‚úÖ **Sch√©ma Convex** : Tables users, products, orders, reservations, downloads, favorites
- ‚úÖ **Int√©gration Clerk-Convex** : Synchronisation utilisateurs fonctionnelle
- ‚úÖ **Nettoyage r√©f√©rences Supabase** : Scripts de migration cr√©√©s

#### Interface Utilisateur Dashboard

- ‚úÖ **LazyDashboard Component** : Dashboard principal avec tabs (Overview, Profile, Settings)
- ‚úÖ **Int√©gration Clerk** : Authentification compl√®te avec useUser hook
- ‚úÖ **Navigation** : Navbar responsive avec authentification Clerk
- ‚úÖ **Composants UI** : Cards, Skeleton, Tabs, Badges impl√©ment√©s
- ‚úÖ **Donn√©es Dashboard** : Hook useDashboardDataOptimized fonctionnel

#### Syst√®me d'Authentification

- ‚úÖ **Clerk Setup** : Configuration compl√®te avec SignIn/SignOut
- ‚úÖ **AuthProvider** : Wrapper d'authentification unifi√©
- ‚úÖ **Protected Routes** : Syst√®me de protection des routes
- ‚úÖ **User Sync** : Synchronisation Clerk-Convex automatique

### üîß Phase 2 - Prochaines √âtapes Critiques

## 1. Optimisation Performance Dashboard

### 1.1 Optimisation Chargement Composants

**Objectif** : R√©duire le temps de chargement initial < 3s

#### Actions Requises :

```typescript
// client/src/components/dashboard/OptimizedDashboard.tsx
import { lazy, Suspense } from 'react';
import { DashboardSkeleton } from '@/components/ui/skeleton';

// Lazy loading des composants lourds
const StatsCards = lazy(() => import('./StatsCards'));
const ActivityFeed = lazy(() => import('./ActivityFeed'));
const TrendCharts = lazy(() => import('./TrendCharts'));
const DataExportManager = lazy(() => import('../DataExportManager'));

export function OptimizedDashboard() {
  return (
    <div className="space-y-6">
      <Suspense fallback={<DashboardSkeleton />}>
        <StatsCards />
      </Suspense>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Suspense fallback={<div className="h-64 bg-gray-800 animate-pulse rounded-lg" />}>
          <ActivityFeed />
        </Suspense>

        <Suspense fallback={<div className="h-64 bg-gray-800 animate-pulse rounded-lg" />}>
          <TrendCharts />
        </Suspense>
      </div>
    </div>
  );
}
```

### 1.2 Optimisation Requ√™tes Convex

**Objectif** : R√©duire les appels API redondants

#### Hook Optimis√© :

```typescript
// client/src/hooks/useDashboardDataOptimized.ts
import { useQuery } from "convex/react";
import { api } from "../../../convex/_generated/api";
import { useMemo } from "react";

export function useDashboardDataOptimized() {
  // Requ√™te unique pour toutes les donn√©es dashboard
  const dashboardData = useQuery(api.dashboard.getDashboardData);

  // Memoization des donn√©es calcul√©es
  const memoizedData = useMemo(() => {
    if (!dashboardData) return null;

    return {
      stats: {
        totalDownloads: dashboardData.downloads?.length || 0,
        totalOrders: dashboardData.orders?.length || 0,
        totalFavorites: dashboardData.favorites?.length || 0,
        totalSpent: dashboardData.orders?.reduce((sum, order) => sum + order.amount, 0) || 0,
      },
      recentActivity: dashboardData.recentActivity?.slice(0, 10) || [],
      chartData: generateChartData(dashboardData.orders || []),
      recommendations: dashboardData.recommendations?.slice(0, 6) || [],
    };
  }, [dashboardData]);

  return {
    ...memoizedData,
    isLoading: dashboardData === undefined,
    error: null,
  };
}
```

### 1.3 Mise en Cache Intelligent

```typescript
// convex/dashboard.ts
import { query } from "./_generated/server";
import { v } from "convex/values";

export const getDashboardData = query({
  args: { userId: v.optional(v.string()) },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) return null;

    const userId = identity.subject;

    // Requ√™te parall√®le pour optimiser les performances
    const [user, orders, downloads, favorites, recentActivity] = await Promise.all([
      ctx.db
        .query("users")
        .filter(q => q.eq(q.field("clerkId"), userId))
        .first(),
      ctx.db
        .query("orders")
        .filter(q => q.eq(q.field("userId"), userId))
        .order("desc")
        .take(20),
      ctx.db
        .query("downloads")
        .filter(q => q.eq(q.field("userId"), userId))
        .order("desc")
        .take(50),
      ctx.db
        .query("favorites")
        .filter(q => q.eq(q.field("userId"), userId))
        .take(100),
      ctx.db
        .query("orders")
        .filter(q => q.eq(q.field("userId"), userId))
        .order("desc")
        .take(10),
    ]);

    return {
      user,
      orders,
      downloads,
      favorites,
      recentActivity,
      recommendations: await getRecommendations(ctx, userId),
    };
  },
});
```

## 2. Finalisation Int√©gration Clerk Authentification

### 2.1 Configuration Clerk Billing

**Objectif** : Pr√©parer l'int√©gration des abonnements

#### Variables d'Environnement Requises :

```env
# .env.local
VITE_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
VITE_CONVEX_URL=https://...

# Clerk Billing (Phase 3)
CLERK_WEBHOOK_SECRET=whsec_...
CLERK_BILLING_ENABLED=true
```

### 2.2 Am√©lioration Hook useClerkSync

```typescript
// client/src/hooks/useClerkSync.ts
import { useUser } from "@clerk/clerk-react";
import { useConvexAuth, useMutation } from "convex/react";
import { useCallback, useEffect, useRef, useState } from "react";
import { api } from "../../../convex/_generated/api";

export function useClerkSync() {
  const { user: clerkUser, isLoaded: clerkLoaded } = useUser();
  const { isAuthenticated } = useConvexAuth();
  const [isSynced, setIsSynced] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const syncInProgress = useRef(false);
  const syncUserMutation = useMutation(api.users.clerkSync.syncClerkUser);

  const syncUser = useCallback(async () => {
    if (!clerkLoaded || !clerkUser || !isAuthenticated || syncInProgress.current) {
      return;
    }

    syncInProgress.current = true;
    setIsLoading(true);
    setError(null);

    try {
      await syncUserMutation({
        clerkId: clerkUser.id,
        email: clerkUser.emailAddresses[0]?.emailAddress || "",
        username: clerkUser.username || undefined,
        firstName: clerkUser.firstName || undefined,
        lastName: clerkUser.lastName || undefined,
        imageUrl: clerkUser.imageUrl || undefined,
        lastLoginAt: Date.now(),
      });

      setIsSynced(true);
      console.log("‚úÖ User synced successfully");
    } catch (err) {
      console.error("‚ùå Error syncing user:", err);
      setError(err instanceof Error ? err.message : "Failed to sync user");
      setIsSynced(false);
    } finally {
      setIsLoading(false);
      syncInProgress.current = false;
    }
  }, [clerkLoaded, clerkUser, isAuthenticated, syncUserMutation]);

  useEffect(() => {
    syncUser();
  }, [syncUser]);

  return {
    isSynced,
    isLoading,
    error,
    isAuthenticated,
    syncUser,
  };
}
```

### 2.3 Composant UserProfile Am√©lior√©

```typescript
// client/src/components/UserProfile.tsx
import { useUser } from '@clerk/clerk-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { User, Mail, Calendar, Shield } from 'lucide-react';

export function UserProfile({ className = '' }: { className?: string }) {
  const { user } = useUser();

  if (!user) return null;

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Informations Profil */}
      <Card className="bg-gray-900 border-gray-700">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-white">
            <User className="h-5 w-5" />
            <span>Informations du Profil</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-4">
            <img
              src={user.imageUrl}
              alt="Avatar"
              className="w-16 h-16 rounded-full border-2 border-purple-500"
            />
            <div>
              <h3 className="text-xl font-semibold text-white">
                {user.firstName} {user.lastName}
              </h3>
              <p className="text-gray-400">@{user.username || 'user'}</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium text-white flex items-center gap-2">
                <Mail className="w-4 h-4" />
                Email
              </label>
              <p className="text-gray-300">{user.emailAddresses[0]?.emailAddress}</p>
            </div>

            <div>
              <label className="text-sm font-medium text-white flex items-center gap-2">
                <Calendar className="w-4 h-4" />
                Membre depuis
              </label>
              <p className="text-gray-300">
                {new Date(user.createdAt!).toLocaleDateString('fr-FR')}
              </p>
            </div>

            <div>
              <label className="text-sm font-medium text-white flex items-center gap-2">
                <Shield className="w-4 h-4" />
                Statut du compte
              </label>
              <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                Actif
              </Badge>
            </div>
          </div>

          <div className="flex space-x-4">
            <Button className="bg-purple-600 hover:bg-purple-700 text-white">
              Modifier le profil
            </Button>
            <Button variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-800">
              Changer le mot de passe
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
```

## 3. Refonte Compl√®te Interface Utilisateur

### 3.1 Syst√®me de Design BroLab

#### Couleurs Principales (selon PRD)

```css
/* client/src/styles/brolab-theme.css */
:root {
  /* Couleurs primaires */
  --brolab-black: #0a0a0a;
  --brolab-orange: #ff6b35;
  --brolab-white: #ffffff;

  /* Couleurs secondaires */
  --brolab-gray-dark: #1a1a1a;
  --brolab-gray-medium: #404040;
  --brolab-orange-light: #ff8c5a;

  /* Couleurs UI */
  --brolab-success: #10b981;
  --brolab-warning: #f59e0b;
  --brolab-error: #ef4444;
  --brolab-info: #3b82f6;
}

/* Styles globaux BroLab */
.brolab-card {
  @apply bg-gray-900 border border-gray-700 rounded-lg shadow-lg;
}

.brolab-button-primary {
  @apply bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors;
}

.brolab-button-secondary {
  @apply bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors;
}

.brolab-text-primary {
  @apply text-white font-medium;
}

.brolab-text-secondary {
  @apply text-gray-300;
}

.brolab-text-muted {
  @apply text-gray-400;
}
```

### 3.2 Layout Principal Responsive

```typescript
// client/src/layout/DashboardLayout.tsx
import { ReactNode } from 'react';
import { Navbar } from '@/components/layout/navbar';
import { Sidebar } from '@/components/layout/sidebar';
import { useIsMobile } from '@/hooks/useIsMobile';

interface DashboardLayoutProps {
  children: ReactNode;
}

export function DashboardLayout({ children }: DashboardLayoutProps) {
  const isMobile = useIsMobile();

  return (
    <div className="min-h-screen bg-brolab-black">
      <Navbar />

      <div className="flex">
        {!isMobile && (
          <Sidebar className="fixed left-0 top-16 h-[calc(100vh-4rem)] w-64 bg-brolab-gray-dark border-r border-gray-700" />
        )}

        <main className={`flex-1 p-6 ${!isMobile ? 'ml-64' : ''}`}>
          <div className="max-w-7xl mx-auto">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}
```

### 3.3 Sidebar Navigation

```typescript
// client/src/components/layout/sidebar.tsx
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import {
  Home,
  Music,
  ShoppingCart,
  Calendar,
  Settings,
  User,
  Download,
  Heart,
  BarChart3
} from 'lucide-react';
import { useLocation } from 'wouter';

interface SidebarProps {
  className?: string;
}

const navigationItems = [
  { icon: Home, label: 'Dashboard', href: '/dashboard' },
  { icon: Music, label: 'Store de Beats', href: '/store' },
  { icon: ShoppingCart, label: 'Mes Commandes', href: '/orders' },
  { icon: Download, label: 'T√©l√©chargements', href: '/downloads' },
  { icon: Heart, label: 'Favoris', href: '/favorites' },
  { icon: Calendar, label: 'R√©servations', href: '/reservations' },
  { icon: BarChart3, label: 'Analytics', href: '/analytics' },
  { icon: User, label: 'Profil', href: '/profile' },
  { icon: Settings, label: 'Param√®tres', href: '/settings' }
];

export function Sidebar({ className }: SidebarProps) {
  const [location, setLocation] = useLocation();

  return (
    <div className={cn('flex flex-col space-y-2 p-4', className)}>
      <div className="mb-6">
        <h2 className="text-xl font-bold text-white mb-2">BroLab</h2>
        <p className="text-sm text-gray-400">Entertainment</p>
      </div>

      <nav className="space-y-1">
        {navigationItems.map((item) => {
          const isActive = location === item.href;
          const Icon = item.icon;

          return (
            <Button
              key={item.href}
              variant={isActive ? 'default' : 'ghost'}
              className={cn(
                'w-full justify-start text-left',
                isActive
                  ? 'bg-brolab-orange text-white'
                  : 'text-gray-300 hover:text-white hover:bg-gray-800'
              )}
              onClick={() => setLocation(item.href)}
            >
              <Icon className="mr-3 h-4 w-4" />
              {item.label}
            </Button>
          );
        })}
      </nav>
    </div>
  );
}
```

## 4. Pr√©paration Phase 3 - Syst√®me Paiement Clerk

### 4.1 Configuration Plans d'Abonnement

#### D√©finition des Plans (selon PRD)

```typescript
// shared/subscription-plans.ts
export const SUBSCRIPTION_PLANS = {
  basic: {
    id: "basic",
    name: "Basic",
    price: 999, // $9.99 en centimes
    interval: "month",
    features: ["basic_license", "mp3_format", "email_support", "5_downloads_per_month"],
    limits: {
      downloads: 5,
      formats: ["mp3"],
      support: "email",
    },
  },
  artist: {
    id: "artist",
    name: "Artist",
    price: 1999, // $19.99 en centimes
    interval: "month",
    features: [
      "premium_license",
      "wav_format",
      "trackouts_available",
      "priority_support",
      "20_downloads_per_month",
      "early_access",
    ],
    limits: {
      downloads: 20,
      formats: ["mp3", "wav"],
      support: "priority",
    },
  },
  ultimate: {
    id: "ultimate",
    name: "Ultimate",
    price: 4999, // $49.99 en centimes
    interval: "month",
    features: [
      "exclusive_license",
      "all_formats",
      "unlimited_downloads",
      "custom_requests",
      "direct_contact",
      "24_7_support",
      "mixing_discounts",
      "exclusive_events",
    ],
    limits: {
      downloads: Infinity,
      formats: ["mp3", "wav", "stems"],
      support: "24_7",
    },
  },
} as const;
```

### 4.2 Hook useClerkBilling Pr√©paratoire

```typescript
// client/src/hooks/useClerkBilling.ts
import { useUser } from "@clerk/clerk-react";
import { useState, useEffect } from "react";
import { SUBSCRIPTION_PLANS } from "../../shared/subscription-plans";

export function useClerkBilling() {
  const { user } = useUser();
  const [currentPlan, setCurrentPlan] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (user) {
      // TODO: R√©cup√©rer le plan actuel depuis Clerk Billing
      // Pour l'instant, plan gratuit par d√©faut
      setCurrentPlan("free");
      setIsLoading(false);
    }
  }, [user]);

  const hasPlan = (planId: string) => {
    return currentPlan === planId;
  };

  const canDownload = (licenseType: string) => {
    switch (licenseType) {
      case "basic":
        return hasPlan("basic") || hasPlan("artist") || hasPlan("ultimate");
      case "premium":
        return hasPlan("artist") || hasPlan("ultimate");
      case "unlimited":
        return hasPlan("ultimate");
      default:
        return false;
    }
  };

  const getDownloadQuota = () => {
    if (hasPlan("ultimate")) {
      return { remaining: Infinity, total: Infinity };
    } else if (hasPlan("artist")) {
      return { remaining: 20, total: 20 }; // TODO: Calculer depuis l'usage r√©el
    } else if (hasPlan("basic")) {
      return { remaining: 5, total: 5 }; // TODO: Calculer depuis l'usage r√©el
    } else {
      return { remaining: 0, total: 0 };
    }
  };

  return {
    currentPlan,
    isLoading,
    hasPlan,
    canDownload,
    getDownloadQuota,
    plans: SUBSCRIPTION_PLANS,
  };
}
```

## 5. M√©triques de Performance Cibles

### 5.1 Objectifs Phase 2

- **Temps de chargement initial** : < 3 secondes
- **Bundle size** : < 2MB
- **Score Lighthouse** : > 90
- **Erreurs TypeScript** : 0
- **Tests passants** : 100%

### 5.2 Monitoring Performance

```typescript
// client/src/utils/performance.ts
export class PerformanceMonitor {
  static measurePageLoad() {
    if (typeof window !== "undefined" && "performance" in window) {
      const navigation = performance.getEntriesByType(
        "navigation"
      )[0] as PerformanceNavigationTiming;

      return {
        domContentLoaded:
          navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
        loadComplete: navigation.loadEventEnd - navigation.loadEventStart,
        firstPaint: performance.getEntriesByName("first-paint")[0]?.startTime || 0,
        firstContentfulPaint:
          performance.getEntriesByName("first-contentful-paint")[0]?.startTime || 0,
      };
    }
    return null;
  }

  static logPerformance(pageName: string) {
    const metrics = this.measurePageLoad();
    if (metrics) {
      console.log(`üìä Performance ${pageName}:`, metrics);
    }
  }
}
```

## 6. Checklist Phase 2 Finalisation

### ‚úÖ T√¢ches Compl√©t√©es

- [x] Migration Convex compl√®te
- [x] Dashboard principal fonctionnel
- [x] Int√©gration Clerk authentification
- [x] Navigation responsive
- [x] Composants UI de base

### üîß T√¢ches en Cours

- [ ] Optimisation performance (lazy loading)
- [ ] Finalisation hook useClerkSync
- [ ] Am√©lioration UserProfile
- [ ] Syst√®me de design complet
- [ ] Layout responsive finalis√©

### üìã Prochaines T√¢ches Phase 3

- [ ] Configuration Clerk Billing
- [ ] Impl√©mentation plans d'abonnement
- [ ] Syst√®me de paiement unifi√©
- [ ] Webhooks Clerk
- [ ] Tests de paiement

## 7. Conclusion Phase 2

La Phase 2 de reconstruction du dashboard BroLab est en bonne voie avec les fondations solides √©tablies. L'int√©gration Clerk-Convex fonctionne, le dashboard principal est op√©rationnel, et l'architecture est pr√™te pour la Phase 3 du syst√®me de paiement.

**Prochaine √©tape** : Finaliser l'optimisation performance et pr√©parer l'int√©gration Clerk Billing pour la Phase 3.
