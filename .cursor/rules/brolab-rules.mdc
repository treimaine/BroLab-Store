---
alwaysApply: true
---

# üéµ BROLAB ENTERTAINMENT - R√àGLES DE D√âVELOPPEMENT

## üìã √âTAT ACTUEL DE L'APPLICATION (Janvier 2025)

### üèóÔ∏è ARCHITECTURE TECHNIQUE

**Stack Principal :**

- **Frontend** : React 18 + TypeScript + Vite + Tailwind CSS
- **Backend** : Express.js + TypeScript + Node.js
- **Base de donn√©es** : Convex (PostgreSQL compatible)
- **Authentification** : Clerk (remplacement Supabase Auth)
- **Paiements** : Clerk Billing (remplacement Stripe)
- **Routing** : Wouter (remplacement React Router)
- **State Management** : TanStack Query + Convex + Zustand
- **UI Components** : Radix UI + shadcn/ui + Framer Motion

**Migration Compl√©t√©e :**

- ‚úÖ **Supabase ‚Üí Convex** : Base de donn√©es migr√©e
- ‚úÖ **Supabase Auth ‚Üí Clerk** : Authentification migr√©e
- ‚úÖ **Stripe ‚Üí Clerk Billing** : Paiements migr√©s
- ‚úÖ **React Router ‚Üí Wouter** : Routing migr√©

### üéØ FONCTIONNALIT√âS PRINCIPALES

#### 1. **Store de Beats**

- Catalogue complet avec filtres avanc√©s
- Recherche en temps r√©el
- Affichage grille/tableau
- Syst√®me de favoris
- Pr√©visualisation audio
- Gestion des licences (Basic, Premium, Unlimited)

#### 2. **Syst√®me d'Authentification**

- Inscription/Connexion via Clerk
- Profils utilisateurs complets
- Synchronisation automatique Clerk ‚Üî Convex
- Gestion des r√¥les (user, admin, artist)
- Protection des routes

#### 3. **Dashboard Utilisateur**

- Vue d'ensemble des statistiques
- Gestion des t√©l√©chargements
- Historique des commandes
- Gestion des favoris
- Profil utilisateur
- Param√®tres du compte

#### 4. **Syst√®me de Paiement**

- Int√©gration Clerk Billing
- Plans d'abonnement (Basic, Artist, Ultimate)
- Gestion des quotas de t√©l√©chargement
- Historique des paiements
- Facturation automatique

#### 5. **Services de Production**

- R√©servation mixing/mastering
- Sessions d'enregistrement
- Consultation production
- Commandes de beats personnalis√©s
- Gestion des r√©servations

### üîß COMPOSANTS PRINCIPAUX

#### **Composants UI (shadcn/ui)**

```typescript
// Composants disponibles
- Button, Input, Card, Badge, Modal
- Tabs, Accordion, Collapsible, Select
- Slider, Checkbox, Radio, Switch
- Toast, Tooltip, Dialog, Popover
- Table, Pagination, Loading states
```

#### **Composants M√©tier**

```typescript
// Store & Beats
-BeatCard,
  TableBeatView,
  OptimizedBeatGrid - UnifiedFilterPanel,
  AdvancedBeatFilters - FeaturedBeatsCarousel,
  RecentlyViewedBeats -
    // Dashboard
    LazyDashboard,
  UserProfile,
  DashboardSkeleton - DownloadsTable,
  OrdersTable,
  AnalyticsCharts - DataExportManager,
  NotificationCenter -
    // Audio & Media
    WaveformPlayer,
  GlobalAudioPlayer,
  HoverPlayButton - SonaarAudioPlayer,
  EnhancedWaveformPlayer -
    // Paiements
    ClerkPaymentForm,
  ClerkNativeCheckout - CompletePaymentFlow,
  PaymentTestComponent - LicensePicker,
  LicensePreviewModal -
    // Layout & Navigation
    Navbar,
  Footer,
  MobileBottomNav - ProtectedRoute,
  AuthenticatedContent - ErrorBoundary,
  LoadingFallback;
```

### üì± PAGES PRINCIPALES

#### **Pages Publiques**

```typescript
- / (Home) : Page d'accueil avec hero et beats featured
- /shop : Catalogue complet des beats
- /product/:id : D√©tail d'un beat
- /about : √Ä propos de BroLab
- /contact : Formulaire de contact
- /faq : Questions fr√©quentes
- /terms, /privacy, /copyright : Pages l√©gales
```

#### **Pages Authentifi√©es**

```typescript
- /dashboard : Dashboard utilisateur principal
- /membership : Gestion des abonnements
- /wishlist : Liste des favoris
- /cart : Panier d'achat
- /checkout : Processus de paiement
- /order-confirmation : Confirmation de commande
```

#### **Pages de Services**

```typescript
- /mixing-mastering : R√©servation services
- /recording-sessions : Sessions d'enregistrement
- /custom-beats : Commandes personnalis√©es
- /production-consultation : Consultation production
- /premium-downloads : T√©l√©chargements premium
```

### üóÑÔ∏è SCH√âMA DE BASE DE DONN√âES (Convex)

#### **Tables Principales**

```typescript
// Users
users: {
  clerkId: string,           // ID Clerk
  email: string,            // Email utilisateur
  username?: string,        // Nom d'utilisateur
  firstName?: string,       // Pr√©nom
  lastName?: string,        // Nom
  imageUrl?: string,        // Avatar
  role?: string,            // 'user', 'admin', 'artist'
  isActive?: boolean,       // Compte actif
  lastLoginAt?: number,     // Derni√®re connexion
  preferences?: any,        // Pr√©f√©rences
  metadata?: any,           // M√©tadonn√©es
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Beats
beats: {
  wordpressId: number,      // ID WordPress
  title: string,            // Titre du beat
  description?: string,     // Description
  genre: string,            // Genre musical
  bpm: number,              // BPM
  key?: string,             // Cl√© musicale
  mood?: string,            // Ambiance
  price: number,            // Prix (centimes)
  audioUrl?: string,        // URL audio
  imageUrl?: string,        // URL image
  tags?: string[],          // Tags
  featured?: boolean,       // Mis en avant
  downloads?: number,       // Nombre t√©l√©chargements
  views?: number,           // Nombre vues
  duration?: number,        // Dur√©e
  isActive?: boolean,       // Actif
  createdAt: number,        // Date cr√©ation
  updatedAt?: number        // Date modification
}

// Orders
orders: {
  userId?: Id<"users">,     // ID utilisateur
  sessionId?: string,       // ID session
  woocommerceId?: number,   // ID WooCommerce
  email: string,            // Email
  total: number,            // Montant total
  status: string,           // Statut commande
  items: any[],             // Items commande
  paymentId?: string,       // ID paiement Clerk
  paymentStatus?: string,   // Statut paiement
  invoiceUrl?: string,      // URL facture
  currency?: string,        // Devise
  taxAmount?: number,       // Montant taxes
  discountAmount?: number,  // Montant remise
  shippingAddress?: any,    // Adresse livraison
  billingAddress?: any,     // Adresse facturation
  notes?: string,           // Notes
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Downloads
downloads: {
  userId: Id<"users">,      // ID utilisateur
  beatId: number,           // ID beat
  licenseType: string,      // Type licence
  downloadUrl: string,      // URL t√©l√©chargement
  timestamp: number,        // Timestamp
  metadata?: any            // M√©tadonn√©es
}

// Favorites
favorites: {
  userId: Id<"users">,      // ID utilisateur
  beatId: number,           // ID beat
  createdAt: number         // Date cr√©ation
}

// Reservations
reservations: {
  userId?: Id<"users">,     // ID utilisateur
  serviceType: string,      // Type service
  status: string,           // Statut r√©servation
  details: any,             // D√©tails
  preferredDate: string,    // Date souhait√©e
  durationMinutes: number,  // Dur√©e (minutes)
  totalPrice: number,       // Prix total
  notes?: string,           // Notes
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Subscriptions
subscriptions: {
  userId: Id<"users">,      // ID utilisateur
  clerkSubscriptionId: string, // ID abonnement Clerk
  plan: string,             // Plan (basic, artist, ultimate)
  status: string,           // Statut (active, cancelled, past_due)
  currentPeriodStart: number, // D√©but p√©riode
  currentPeriodEnd: number,   // Fin p√©riode
  cancelAtPeriodEnd?: boolean, // Annulation programm√©e
  features: string[],       // Fonctionnalit√©s incluses
  downloadQuota: number,    // Quota t√©l√©chargements
  downloadUsed: number,     // T√©l√©chargements utilis√©s
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}
```

### üîê SYST√àME D'AUTHENTIFICATION (Clerk)

#### **Configuration**

```typescript
// main.tsx
<ClerkProvider publishableKey={clerkPublishableKey}>
  <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
    <App />
  </ConvexProviderWithClerk>
</ClerkProvider>
```

#### **Hooks d'Authentification**

```typescript
// Hooks disponibles
- useUser() : Informations utilisateur Clerk
- useAuth() : √âtat authentification
- useClerkSync() : Synchronisation Clerk ‚Üî Convex
- useConvexAuth() : Authentification Convex
```

#### **Synchronisation Automatique**

```typescript
// useClerkSync.ts
- Synchronisation automatique des utilisateurs
- Gestion des √©tats de chargement
- Protection contre les synchronisations multiples
- Gestion des erreurs et retry
```

### üí≥ SYST√àME DE PAIEMENT (Clerk Billing)

#### **Plans d'Abonnement**

```typescript
// Plans disponibles
basic: {
  price: 999,              // 9.99‚Ç¨/mois
  features: ["basic_license", "mp3_format", "5_downloads_per_month"]
}

artist: {
  price: 1999,             // 19.99‚Ç¨/mois
  features: ["premium_license", "wav_format", "20_downloads_per_month"]
}

ultimate: {
  price: 4999,             // 49.99‚Ç¨/mois
  features: ["exclusive_license", "unlimited_downloads", "all_formats"]
}
```

#### **Composants de Paiement**

```typescript
// Composants disponibles
- ClerkPaymentForm : Formulaire de paiement
- ClerkNativeCheckout : Checkout natif Clerk
- ClerkUnifiedCheckout : Interface unifi√©e
- CompletePaymentFlow : Flux complet de paiement
```

### üé® SYST√àME DE DESIGN

#### **Variables CSS (design-tokens.css)**

```css
:root {
  /* Couleurs principales */
  --deep-black: hsl(240, 10%, 3.9%);
  --accent-purple: #a259ff;
  --accent-cyan: #00d4ff;
  --color-gold: #ffd700;

  /* Couleurs secondaires */
  --dark-gray: hsl(240, 10%, 3.9%);
  --medium-gray: hsl(240, 10%, 3.9%);
  --light-gray: hsl(240, 10%, 3.9%);

  /* Couleurs UI */
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  --info: #3b82f6;
}
```

#### **Classes Tailwind Personnalis√©es**

```css
/* Classes utilitaires */
.card-dark {
  @apply bg-gray-900 border border-gray-700 rounded-lg;
}
.form-input {
  @apply bg-gray-800 border border-gray-600 text-white;
}
.btn-primary {
  @apply bg-[var(--accent-purple)] hover:bg-purple-700;
}
```

### üì± RESPONSIVE DESIGN

#### **Breakpoints**

```typescript
// Breakpoints Tailwind
sm: 640px   // Mobile landscape
md: 768px   // Tablet portrait
lg: 1024px  // Tablet landscape
xl: 1280px  // Desktop
2xl: 1536px // Large desktop
```

#### **Composants Responsive**

```typescript
// Composants adaptatifs
- MobileBottomNav : Navigation mobile
- ResponsiveBeatCard : Carte beat responsive
- OptimizedBeatGrid : Grille optimis√©e mobile
- UnifiedFilterPanel : Filtres adaptatifs
```

### üöÄ OPTIMISATIONS DE PERFORMANCE

#### **Lazy Loading**

```typescript
// Composants charg√©s √† la demande
- LazyDashboard : Dashboard avec Suspense
- LazyComponents : Composants lourds
- LoadingFallback : √âtats de chargement
- DashboardSkeleton : Squelettes de chargement
```

#### **Optimisations Images**

```typescript
// Utilitaires d'optimisation
- optimizeImage() : Optimisation des images
- OptimizedImage : Composant image optimis√©
- preloadCriticalResources() : Pr√©chargement ressources
```

#### **Monitoring Performance**

```typescript
// Outils de monitoring
- PerformanceMonitor : Mesures de performance
- ErrorTracker : Suivi des erreurs
- HealthMonitor : V√©rification des services
```

### üß™ TESTS ET VALIDATION

#### **Suite de Tests**

```typescript
// Tests disponibles
- Tests unitaires : Jest + React Testing Library
- Tests d'int√©gration : Convex Testing Helper
- Tests de performance : Bundle size, load time
- Tests de s√©curit√© : Authentification, autorisations
```

#### **Scripts de Test**

```bash
npm run test              # Tests unitaires
npm run type-check        # V√©rification TypeScript
npm run lint              # Linting ESLint
npm run pre-check         # V√©rifications pr√©-build
```

### üîß SCRIPTS ET UTILITAIRES

#### **Scripts de D√©veloppement**

```bash
npm run dev               # Serveur de d√©veloppement
npm run client            # Client Vite
npm run build             # Build production
npm run start             # Serveur production
npm run clean             # Nettoyage complet
```

#### **Scripts de Migration**

```bash
npm run clean:all         # Nettoyage complet
npm run clean:logs        # Nettoyage logs
npm run clean:db          # Nettoyage base de donn√©es
```

### üìö DOCUMENTATION

#### **Fichiers de Documentation**

```markdown
- README.md : Documentation principale
- README-local.md : Guide d√©veloppement local
- README-deployment.md : Guide d√©ploiement
- README-responsive.md : Guide responsive design
- LOCAL_DEVELOPMENT_GUIDE.md : Guide d√©veloppement d√©taill√©
- TESTING_GUIDE.md : Guide des tests
- UNIFIED_FILTERING_SYSTEM.md : Syst√®me de filtrage
```

### üö® PROBL√àMES CONNUS

#### **Erreurs TypeScript**

```typescript
// Erreur connue dans useClerkSync.ts
client/src/hooks/useClerkSync.ts:18:40 - error TS2589:
Type instantiation is excessively deep and possibly infinite.

// Solution temporaire : Utiliser any pour la mutation
const syncUserMutation = useMutation(api.users.clerkSync.syncClerkUser as any);
```

#### **Limitations Actuelles**

- Extension Tailwind CSS manquante dans VS Code (erreur "Unknown at rule @tailwind")
- Certains composants legacy encore pr√©sents
- Tests de paiement en mode d√©veloppement uniquement

### üéØ PROCHAINES √âTAPES

#### **Phase 4 - Nettoyage & Optimisation**

- [ ] Suppression des composants obsol√®tes
- [ ] Optimisation du bundle size
- [ ] Am√©lioration des performances
- [ ] Tests de paiement complets
- [ ] Documentation finale

#### **Phase 5 - D√©ploiement Production**

- [ ] Configuration o2switch
- [ ] Tests de charge
- [ ] Monitoring production
- [ ] Backup et s√©curit√©
- [ ] Formation √©quipe

### üìã R√àGLES DE D√âVELOPPEMENT

#### **Conventions de Code**

```typescript
// Naming conventions
- Composants : PascalCase (BeatCard, UserProfile)
- Hooks : camelCase avec use (useClerkSync, useUnifiedFilters)
- Fichiers : kebab-case (beat-card.tsx, user-profile.tsx)
- Types : PascalCase (BeatProduct, UnifiedFilters)
- Variables : camelCase (isLoading, hasActiveFilters)
```

#### **Structure des Composants**

```typescript
// Ordre des imports
1. React et hooks
2. Composants UI (shadcn/ui)
3. Composants m√©tier
4. Hooks personnalis√©s
5. Utilitaires et types
6. Styles et assets

// Structure du composant
1. Interface Props
2. Hooks et √©tat
3. Fonctions de gestion
4. Rendu conditionnel
5. Rendu principal
6. Export
```

#### **Gestion des Erreurs**

```typescript
// Pattern d'erreur
try {
  // Logique m√©tier
} catch (error) {
  console.error("‚ùå Error description:", error);
  // Gestion d'erreur utilisateur
}

// Composants d'erreur
- ErrorBoundary : Capture erreurs React
- EnhancedErrorHandling : Gestion avanc√©e
- LoadingFallback : √âtats de chargement
```

### üîç D√âBOGAGE ET MONITORING

#### **Logs de D√©veloppement**

```typescript
// Console logs avec emojis
console.log("üöÄ Starting application...");
console.log("‚úÖ User synced successfully");
console.log("‚ùå Error syncing user:", error);
console.log("üéµ Playing audio:", audioUrl);
console.log("üñºÔ∏è Image loaded:", imageUrl);
```

#### **Monitoring en Production**

```typescript
// M√©triques de performance
- First Contentful Paint (FCP)
- Largest Contentful Paint (LCP)
- Time to Interactive (TTI)
- Cumulative Layout Shift (CLS)
- Bundle size et chunks
```

---

**üìÖ Derni√®re mise √† jour :** 26 janvier 2025  
**üîÑ Version :** 2.0 - Architecture Convex + Clerk  
**üë®‚Äçüíª Statut :** Phase 4 - Nettoyage & Optimisation  
**üéØ Prochaine √©tape :** D√©ploiement production o2switch

```

```

# üéµ BROLAB ENTERTAINMENT - R√àGLES DE D√âVELOPPEMENT

## üìã √âTAT ACTUEL DE L'APPLICATION (Janvier 2025)

### üèóÔ∏è ARCHITECTURE TECHNIQUE

**Stack Principal :**

- **Frontend** : React 18 + TypeScript + Vite + Tailwind CSS
- **Backend** : Express.js + TypeScript + Node.js
- **Base de donn√©es** : Convex (PostgreSQL compatible)
- **Authentification** : Clerk (remplacement Supabase Auth)
- **Paiements** : Clerk Billing (remplacement Stripe)
- **Routing** : Wouter (remplacement React Router)
- **State Management** : TanStack Query + Convex + Zustand
- **UI Components** : Radix UI + shadcn/ui + Framer Motion

**Migration Compl√©t√©e :**

- ‚úÖ **Supabase ‚Üí Convex** : Base de donn√©es migr√©e
- ‚úÖ **Supabase Auth ‚Üí Clerk** : Authentification migr√©e
- ‚úÖ **Stripe ‚Üí Clerk Billing** : Paiements migr√©s
- ‚úÖ **React Router ‚Üí Wouter** : Routing migr√©

### üéØ FONCTIONNALIT√âS PRINCIPALES

#### 1. **Store de Beats**

- Catalogue complet avec filtres avanc√©s
- Recherche en temps r√©el
- Affichage grille/tableau
- Syst√®me de favoris
- Pr√©visualisation audio
- Gestion des licences (Basic, Premium, Unlimited)

#### 2. **Syst√®me d'Authentification**

- Inscription/Connexion via Clerk
- Profils utilisateurs complets
- Synchronisation automatique Clerk ‚Üî Convex
- Gestion des r√¥les (user, admin, artist)
- Protection des routes

#### 3. **Dashboard Utilisateur**

- Vue d'ensemble des statistiques
- Gestion des t√©l√©chargements
- Historique des commandes
- Gestion des favoris
- Profil utilisateur
- Param√®tres du compte

#### 4. **Syst√®me de Paiement**

- Int√©gration Clerk Billing
- Plans d'abonnement (Basic, Artist, Ultimate)
- Gestion des quotas de t√©l√©chargement
- Historique des paiements
- Facturation automatique

#### 5. **Services de Production**

- R√©servation mixing/mastering
- Sessions d'enregistrement
- Consultation production
- Commandes de beats personnalis√©s
- Gestion des r√©servations

### üîß COMPOSANTS PRINCIPAUX

#### **Composants UI (shadcn/ui)**

```typescript
// Composants disponibles
- Button, Input, Card, Badge, Modal
- Tabs, Accordion, Collapsible, Select
- Slider, Checkbox, Radio, Switch
- Toast, Tooltip, Dialog, Popover
- Table, Pagination, Loading states
```

#### **Composants M√©tier**

```typescript
// Store & Beats
-BeatCard,
  TableBeatView,
  OptimizedBeatGrid - UnifiedFilterPanel,
  AdvancedBeatFilters - FeaturedBeatsCarousel,
  RecentlyViewedBeats -
    // Dashboard
    LazyDashboard,
  UserProfile,
  DashboardSkeleton - DownloadsTable,
  OrdersTable,
  AnalyticsCharts - DataExportManager,
  NotificationCenter -
    // Audio & Media
    WaveformPlayer,
  GlobalAudioPlayer,
  HoverPlayButton - SonaarAudioPlayer,
  EnhancedWaveformPlayer -
    // Paiements
    ClerkPaymentForm,
  ClerkNativeCheckout - CompletePaymentFlow,
  PaymentTestComponent - LicensePicker,
  LicensePreviewModal -
    // Layout & Navigation
    Navbar,
  Footer,
  MobileBottomNav - ProtectedRoute,
  AuthenticatedContent - ErrorBoundary,
  LoadingFallback;
```

### üì± PAGES PRINCIPALES

#### **Pages Publiques**

```typescript
- / (Home) : Page d'accueil avec hero et beats featured
- /shop : Catalogue complet des beats
- /product/:id : D√©tail d'un beat
- /about : √Ä propos de BroLab
- /contact : Formulaire de contact
- /faq : Questions fr√©quentes
- /terms, /privacy, /copyright : Pages l√©gales
```

#### **Pages Authentifi√©es**

```typescript
- /dashboard : Dashboard utilisateur principal
- /membership : Gestion des abonnements
- /wishlist : Liste des favoris
- /cart : Panier d'achat
- /checkout : Processus de paiement
- /order-confirmation : Confirmation de commande
```

#### **Pages de Services**

```typescript
- /mixing-mastering : R√©servation services
- /recording-sessions : Sessions d'enregistrement
- /custom-beats : Commandes personnalis√©es
- /production-consultation : Consultation production
- /premium-downloads : T√©l√©chargements premium
```

### üóÑÔ∏è SCH√âMA DE BASE DE DONN√âES (Convex)

#### **Tables Principales**

```typescript
// Users
users: {
  clerkId: string,           // ID Clerk
  email: string,            // Email utilisateur
  username?: string,        // Nom d'utilisateur
  firstName?: string,       // Pr√©nom
  lastName?: string,        // Nom
  imageUrl?: string,        // Avatar
  role?: string,            // 'user', 'admin', 'artist'
  isActive?: boolean,       // Compte actif
  lastLoginAt?: number,     // Derni√®re connexion
  preferences?: any,        // Pr√©f√©rences
  metadata?: any,           // M√©tadonn√©es
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Beats
beats: {
  wordpressId: number,      // ID WordPress
  title: string,            // Titre du beat
  description?: string,     // Description
  genre: string,            // Genre musical
  bpm: number,              // BPM
  key?: string,             // Cl√© musicale
  mood?: string,            // Ambiance
  price: number,            // Prix (centimes)
  audioUrl?: string,        // URL audio
  imageUrl?: string,        // URL image
  tags?: string[],          // Tags
  featured?: boolean,       // Mis en avant
  downloads?: number,       // Nombre t√©l√©chargements
  views?: number,           // Nombre vues
  duration?: number,        // Dur√©e
  isActive?: boolean,       // Actif
  createdAt: number,        // Date cr√©ation
  updatedAt?: number        // Date modification
}

// Orders
orders: {
  userId?: Id<"users">,     // ID utilisateur
  sessionId?: string,       // ID session
  woocommerceId?: number,   // ID WooCommerce
  email: string,            // Email
  total: number,            // Montant total
  status: string,           // Statut commande
  items: any[],             // Items commande
  paymentId?: string,       // ID paiement Clerk
  paymentStatus?: string,   // Statut paiement
  invoiceUrl?: string,      // URL facture
  currency?: string,        // Devise
  taxAmount?: number,       // Montant taxes
  discountAmount?: number,  // Montant remise
  shippingAddress?: any,    // Adresse livraison
  billingAddress?: any,     // Adresse facturation
  notes?: string,           // Notes
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Downloads
downloads: {
  userId: Id<"users">,      // ID utilisateur
  beatId: number,           // ID beat
  licenseType: string,      // Type licence
  downloadUrl: string,      // URL t√©l√©chargement
  timestamp: number,        // Timestamp
  metadata?: any            // M√©tadonn√©es
}

// Favorites
favorites: {
  userId: Id<"users">,      // ID utilisateur
  beatId: number,           // ID beat
  createdAt: number         // Date cr√©ation
}

// Reservations
reservations: {
  userId?: Id<"users">,     // ID utilisateur
  serviceType: string,      // Type service
  status: string,           // Statut r√©servation
  details: any,             // D√©tails
  preferredDate: string,    // Date souhait√©e
  durationMinutes: number,  // Dur√©e (minutes)
  totalPrice: number,       // Prix total
  notes?: string,           // Notes
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}

// Subscriptions
subscriptions: {
  userId: Id<"users">,      // ID utilisateur
  clerkSubscriptionId: string, // ID abonnement Clerk
  plan: string,             // Plan (basic, artist, ultimate)
  status: string,           // Statut (active, cancelled, past_due)
  currentPeriodStart: number, // D√©but p√©riode
  currentPeriodEnd: number,   // Fin p√©riode
  cancelAtPeriodEnd?: boolean, // Annulation programm√©e
  features: string[],       // Fonctionnalit√©s incluses
  downloadQuota: number,    // Quota t√©l√©chargements
  downloadUsed: number,     // T√©l√©chargements utilis√©s
  createdAt: number,        // Date cr√©ation
  updatedAt: number         // Date modification
}
```

### üîê SYST√àME D'AUTHENTIFICATION (Clerk)

#### **Configuration**

```typescript
// main.tsx
<ClerkProvider publishableKey={clerkPublishableKey}>
  <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
    <App />
  </ConvexProviderWithClerk>
</ClerkProvider>
```

#### **Hooks d'Authentification**

```typescript
// Hooks disponibles
- useUser() : Informations utilisateur Clerk
- useAuth() : √âtat authentification
- useClerkSync() : Synchronisation Clerk ‚Üî Convex
- useConvexAuth() : Authentification Convex
```

#### **Synchronisation Automatique**

```typescript
// useClerkSync.ts
- Synchronisation automatique des utilisateurs
- Gestion des √©tats de chargement
- Protection contre les synchronisations multiples
- Gestion des erreurs et retry
```

### üí≥ SYST√àME DE PAIEMENT (Clerk Billing)

#### **Plans d'Abonnement**

```typescript
// Plans disponibles
basic: {
  price: 999,              // 9.99‚Ç¨/mois
  features: ["basic_license", "mp3_format", "5_downloads_per_month"]
}

artist: {
  price: 1999,             // 19.99‚Ç¨/mois
  features: ["premium_license", "wav_format", "20_downloads_per_month"]
}

ultimate: {
  price: 4999,             // 49.99‚Ç¨/mois
  features: ["exclusive_license", "unlimited_downloads", "all_formats"]
}
```

#### **Composants de Paiement**

```typescript
// Composants disponibles
- ClerkPaymentForm : Formulaire de paiement
- ClerkNativeCheckout : Checkout natif Clerk
- ClerkUnifiedCheckout : Interface unifi√©e
- CompletePaymentFlow : Flux complet de paiement
```

### üé® SYST√àME DE DESIGN

#### **Variables CSS (design-tokens.css)**

```css
:root {
  /* Couleurs principales */
  --deep-black: hsl(240, 10%, 3.9%);
  --accent-purple: #a259ff;
  --accent-cyan: #00d4ff;
  --color-gold: #ffd700;

  /* Couleurs secondaires */
  --dark-gray: hsl(240, 10%, 3.9%);
  --medium-gray: hsl(240, 10%, 3.9%);
  --light-gray: hsl(240, 10%, 3.9%);

  /* Couleurs UI */
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  --info: #3b82f6;
}
```

#### **Classes Tailwind Personnalis√©es**

```css
/* Classes utilitaires */
.card-dark {
  @apply bg-gray-900 border border-gray-700 rounded-lg;
}
.form-input {
  @apply bg-gray-800 border border-gray-600 text-white;
}
.btn-primary {
  @apply bg-[var(--accent-purple)] hover:bg-purple-700;
}
```

### üì± RESPONSIVE DESIGN

#### **Breakpoints**

```typescript
// Breakpoints Tailwind
sm: 640px   // Mobile landscape
md: 768px   // Tablet portrait
lg: 1024px  // Tablet landscape
xl: 1280px  // Desktop
2xl: 1536px // Large desktop
```

#### **Composants Responsive**

```typescript
// Composants adaptatifs
- MobileBottomNav : Navigation mobile
- ResponsiveBeatCard : Carte beat responsive
- OptimizedBeatGrid : Grille optimis√©e mobile
- UnifiedFilterPanel : Filtres adaptatifs
```

### üöÄ OPTIMISATIONS DE PERFORMANCE

#### **Lazy Loading**

```typescript
// Composants charg√©s √† la demande
- LazyDashboard : Dashboard avec Suspense
- LazyComponents : Composants lourds
- LoadingFallback : √âtats de chargement
- DashboardSkeleton : Squelettes de chargement
```

#### **Optimisations Images**

```typescript
// Utilitaires d'optimisation
- optimizeImage() : Optimisation des images
- OptimizedImage : Composant image optimis√©
- preloadCriticalResources() : Pr√©chargement ressources
```

#### **Monitoring Performance**

```typescript
// Outils de monitoring
- PerformanceMonitor : Mesures de performance
- ErrorTracker : Suivi des erreurs
- HealthMonitor : V√©rification des services
```

### üß™ TESTS ET VALIDATION

#### **Suite de Tests**

```typescript
// Tests disponibles
- Tests unitaires : Jest + React Testing Library
- Tests d'int√©gration : Convex Testing Helper
- Tests de performance : Bundle size, load time
- Tests de s√©curit√© : Authentification, autorisations
```

#### **Scripts de Test**

```bash
npm run test              # Tests unitaires
npm run type-check        # V√©rification TypeScript
npm run lint              # Linting ESLint
npm run pre-check         # V√©rifications pr√©-build
```

### üîß SCRIPTS ET UTILITAIRES

#### **Scripts de D√©veloppement**

```bash
npm run dev               # Serveur de d√©veloppement
npm run client            # Client Vite
npm run build             # Build production
npm run start             # Serveur production
npm run clean             # Nettoyage complet
```

#### **Scripts de Migration**

```bash
npm run clean:all         # Nettoyage complet
npm run clean:logs        # Nettoyage logs
npm run clean:db          # Nettoyage base de donn√©es
```

### üìö DOCUMENTATION

#### **Fichiers de Documentation**

```markdown
- README.md : Documentation principale
- README-local.md : Guide d√©veloppement local
- README-deployment.md : Guide d√©ploiement
- README-responsive.md : Guide responsive design
- LOCAL_DEVELOPMENT_GUIDE.md : Guide d√©veloppement d√©taill√©
- TESTING_GUIDE.md : Guide des tests
- UNIFIED_FILTERING_SYSTEM.md : Syst√®me de filtrage
```

### üö® PROBL√àMES CONNUS

#### **Erreurs TypeScript**

```typescript
// Erreur connue dans useClerkSync.ts
client/src/hooks/useClerkSync.ts:18:40 - error TS2589:
Type instantiation is excessively deep and possibly infinite.

// Solution temporaire : Utiliser any pour la mutation
const syncUserMutation = useMutation(api.users.clerkSync.syncClerkUser as any);
```

#### **Limitations Actuelles**

- Extension Tailwind CSS manquante dans VS Code (erreur "Unknown at rule @tailwind")
- Certains composants legacy encore pr√©sents
- Tests de paiement en mode d√©veloppement uniquement

### üéØ PROCHAINES √âTAPES

#### **Phase 4 - Nettoyage & Optimisation**

- [ ] Suppression des composants obsol√®tes
- [ ] Optimisation du bundle size
- [ ] Am√©lioration des performances
- [ ] Tests de paiement complets
- [ ] Documentation finale

#### **Phase 5 - D√©ploiement Production**

- [ ] Configuration o2switch
- [ ] Tests de charge
- [ ] Monitoring production
- [ ] Backup et s√©curit√©
- [ ] Formation √©quipe

### üìã R√àGLES DE D√âVELOPPEMENT

#### **Conventions de Code**

```typescript
// Naming conventions
- Composants : PascalCase (BeatCard, UserProfile)
- Hooks : camelCase avec use (useClerkSync, useUnifiedFilters)
- Fichiers : kebab-case (beat-card.tsx, user-profile.tsx)
- Types : PascalCase (BeatProduct, UnifiedFilters)
- Variables : camelCase (isLoading, hasActiveFilters)
```

#### **Structure des Composants**

```typescript
// Ordre des imports
1. React et hooks
2. Composants UI (shadcn/ui)
3. Composants m√©tier
4. Hooks personnalis√©s
5. Utilitaires et types
6. Styles et assets

// Structure du composant
1. Interface Props
2. Hooks et √©tat
3. Fonctions de gestion
4. Rendu conditionnel
5. Rendu principal
6. Export
```

#### **Gestion des Erreurs**

```typescript
// Pattern d'erreur
try {
  // Logique m√©tier
} catch (error) {
  console.error("‚ùå Error description:", error);
  // Gestion d'erreur utilisateur
}

// Composants d'erreur
- ErrorBoundary : Capture erreurs React
- EnhancedErrorHandling : Gestion avanc√©e
- LoadingFallback : √âtats de chargement
```

### üîç D√âBOGAGE ET MONITORING

#### **Logs de D√©veloppement**

```typescript
// Console logs avec emojis
console.log("üöÄ Starting application...");
console.log("‚úÖ User synced successfully");
console.log("‚ùå Error syncing user:", error);
console.log("üéµ Playing audio:", audioUrl);
console.log("üñºÔ∏è Image loaded:", imageUrl);
```

#### **Monitoring en Production**

```typescript
// M√©triques de performance
- First Contentful Paint (FCP)
- Largest Contentful Paint (LCP)
- Time to Interactive (TTI)
- Cumulative Layout Shift (CLS)
- Bundle size et chunks
```

---

**üìÖ Derni√®re mise √† jour :** 26 janvier 2025  
**üîÑ Version :** 2.0 - Architecture Convex + Clerk  
**üë®‚Äçüíª Statut :** Phase 4 - Nettoyage & Optimisation  
**üéØ Prochaine √©tape :** D√©ploiement production o2switch

```

```
