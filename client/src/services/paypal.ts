import { PayPalPaymentRequest, PayPalPaymentResponse } from "../config/paypal";

/**
 * Service PayPal c√¥t√© client
 * G√®re les appels API vers le serveur pour les paiements PayPal
 * ‚úÖ CORRECTION: Utilise approvalLink et g√®re correctement les param√®tres PayPal
 */
export class PayPalClientService {
  private static readonly API_BASE = "/api/payment/paypal";

  /**
   * Cr√©e une commande PayPal pour le paiement d'une r√©servation
   * ‚úÖ CORRECTION: Utilise approvalLink au lieu de paymentUrl
   */
  static async createPaymentOrder(
    paymentRequest: PayPalPaymentRequest,
    authHeaders: HeadersInit
  ): Promise<PayPalPaymentResponse> {
    try {
      console.log("üöÄ Creating PayPal payment order:", paymentRequest);

      const response = await fetch(`${this.API_BASE}/create-order`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          ...authHeaders,
        },
        body: JSON.stringify(paymentRequest),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log("‚úÖ PayPal order created successfully:", result);

      // ‚úÖ CORRECTION: Utiliser approvalLink au lieu de paymentUrl
      return {
        success: true,
        paymentUrl: result.approvalLink, // ‚úÖ CORRECTION: approvalLink PayPal
        orderId: result.orderId,
      };
    } catch (error) {
      console.error("‚ùå Error creating PayPal order:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Failed to create PayPal order",
      };
    }
  }

  /**
   * Capture un paiement PayPal apr√®s approbation
   * ‚úÖ CORRECTION: Utilise l'orderId PayPal (token) pour la capture
   */
  static async capturePayment(
    orderId: string
  ): Promise<{ success: boolean; transactionId?: string; error?: string }> {
    try {
      console.log("üéØ Capturing PayPal payment for order:", orderId);

      // ‚úÖ CORRECTION: orderId est le token PayPal, pas le reservationId
      if (!orderId || orderId.length < 10) {
        throw new Error("Invalid PayPal order ID");
      }

      const response = await fetch(`${this.API_BASE}/capture-payment`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ orderId }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      console.log("‚úÖ Payment captured successfully:", result);

      return {
        success: true,
        transactionId: result.transactionId,
      };
    } catch (error) {
      console.error("‚ùå Error capturing payment:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Failed to capture payment",
      };
    }
  }

  /**
   * Obtient les d√©tails d'une commande PayPal
   * ‚úÖ CORRECTION: Utilise l'orderId PayPal
   */
  static async getOrderDetails(orderId: string): Promise<any> {
    try {
      console.log("üìã Getting PayPal order details:", orderId);

      // ‚úÖ CORRECTION: orderId est le token PayPal
      if (!orderId || orderId.length < 10) {
        throw new Error("Invalid PayPal order ID");
      }

      const response = await fetch(`${this.API_BASE}/order/${orderId}`);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return result.order;
    } catch (error) {
      console.error("‚ùå Error getting order details:", error);
      throw error;
    }
  }

  /**
   * V√©rifie la sant√© du service PayPal
   */
  static async checkHealth(): Promise<{ success: boolean; message?: string; error?: string }> {
    try {
      const response = await fetch(`${this.API_BASE}/health`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return {
        success: true,
        message: result.message,
      };
    } catch (error) {
      console.error("‚ùå PayPal service health check failed:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Health check failed",
      };
    }
  }

  /**
   * Redirige vers PayPal pour le paiement
   * ‚úÖ CORRECTION: Utilise l'approvalLink PayPal direct
   */
  static redirectToPayPal(approvalLink: string): void {
    try {
      console.log("üîÑ Redirecting to PayPal:", approvalLink);

      // ‚úÖ CORRECTION: V√©rifier que c'est bien une URL PayPal
      if (!approvalLink.includes("paypal.com")) {
        throw new Error("Invalid PayPal approval link");
      }

      window.location.href = approvalLink;
    } catch (error) {
      console.error("‚ùå Error redirecting to PayPal:", error);
      throw error;
    }
  }

  /**
   * G√®re le retour de PayPal apr√®s paiement
   * ‚úÖ CORRECTION: Utilise le token PayPal (orderId) pour la capture
   */
  static async handlePayPalReturn(
    token: string
  ): Promise<{ success: boolean; transactionId?: string; error?: string }> {
    try {
      console.log("üîÑ Handling PayPal return with token:", token);

      // ‚úÖ CORRECTION: token est l'orderId PayPal, pas le reservationId
      if (!token || token.length < 10) {
        throw new Error("Invalid PayPal token");
      }

      // Capture le paiement avec le token retourn√©
      const result = await this.capturePayment(token);

      if (result.success) {
        console.log("‚úÖ PayPal payment completed successfully");
        return result;
      } else {
        console.error("‚ùå PayPal payment failed:", result.error);
        return result;
      }
    } catch (error) {
      console.error("‚ùå Error handling PayPal return:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Failed to handle PayPal return",
      };
    }
  }

  /**
   * Valide les donn√©es de paiement avant envoi
   * ‚úÖ CORRECTION: Validation renforc√©e
   */
  static validatePaymentRequest(paymentRequest: PayPalPaymentRequest): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    if (!paymentRequest.serviceType) {
      errors.push("Service type is required");
    }

    if (!paymentRequest.amount || paymentRequest.amount <= 0) {
      errors.push("Valid amount is required");
    }

    if (!paymentRequest.currency) {
      errors.push("Currency is required");
    }

    if (!paymentRequest.description) {
      errors.push("Description is required");
    }

    if (!paymentRequest.reservationId) {
      errors.push("Reservation ID is required");
    }

    if (!paymentRequest.customerEmail) {
      errors.push("Customer email is required");
    }

    // ‚úÖ CORRECTION: Validation suppl√©mentaire
    if (paymentRequest.amount > 10000) {
      errors.push("Amount exceeds maximum limit");
    }

    if (!["EUR", "USD"].includes(paymentRequest.currency.toUpperCase())) {
      errors.push("Unsupported currency");
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}

export default PayPalClientService;
