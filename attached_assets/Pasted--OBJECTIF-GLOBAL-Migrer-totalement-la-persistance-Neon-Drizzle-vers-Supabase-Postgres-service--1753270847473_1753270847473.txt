🎯 OBJECTIF GLOBAL
Migrer totalement la persistance Neon/Drizzle vers Supabase (Postgres + service role) :
- Auth custom Express conservée.
- 100% migrations SQL (pas Drizzle runtime).
- Transactions multi‑tables via fonctions SQL (RPC) si nécessaire.
- Tests Jest verts à la fin.
- Aucun changement appliqué sans ≥95 % de certitude : tu poses des questions, tu proposes, tu attends validation.

────────────────────────────────────────
🧭 PROCESSUS IMPOSÉ (VALIDATION ÉTAPE PAR ÉTAPE)

### ÉTAPE 0 — Rappel (déjà fait)
Cartographie confirmée. On enchaîne.

### ÉTAPE 1 — CONFIG SUPABASE (ENV + CLIENTS)
1. Liste les variables d’env à ajouter (.env.local) :
   - SUPABASE_URL
   - SUPABASE_SERVICE_ROLE_KEY
   - SUPABASE_ANON_KEY (si front SSR/CSR en a besoin)
2. Crée/complète `server/lib/supabaseAdmin.ts` :
   ```ts
   import { createClient } from '@supabase/supabase-js';
   export const supabaseAdmin = createClient(
     process.env.SUPABASE_URL!,
     process.env.SUPABASE_SERVICE_ROLE_KEY!,
     { auth: { persistSession: false } }
   );
(Optionnel) server/lib/supabaseClient.ts pour l’ANON_KEY côté front si nécessaire.

⚠️ Ne touche pas encore à server/db.ts ni aux helpers.
➡️ Propose les diffs (```diff) pour ces fichiers + où placer les env.
STOP, attend ma validation.

ÉTAPE 2 — REMPLACER L’INIT DB / SUPPRIMER NEON RUNTIME
Ouvre server/db.ts (ou équivalent) :

Retire Neon/drizzle runtime.

Exporte soit rien (si inutile), soit de petits utilitaires communs.

Toute requête passera par des helpers dans server/lib/db.ts via supabaseAdmin.

Mets à jour les imports dans les fichiers qui utilisaient db/drizzle.

⚠️ Fais-le en petits paquets (3–4 fichiers max).
➡️ Propose un premier diff (server/db.ts + 2 helpers max) — STOP, validation.

ÉTAPE 3 — HELPERS DB (PAR LOTS)
Pour chaque helper (ex : getUserById, upsertUser, upsertSubscription, logDownload, createServiceOrder, etc.) :

Remplacer drizzle/pg par :

ts
Copier
Modifier
const { data, error } = await supabaseAdmin
  .from('<table>')
  .select('*')
  .eq('id', userId)
  .single();
Respecter les types TS (shared/schema.ts).

Gérer les erreurs (throw si error).

Procède par mini-lots :

Lot 1 : users (getUserById, getUserByEmail, upsertUser…)

Lot 2 : subscriptions

Lot 3 : downloads

Lot 4 : service_orders

etc.

➡️ À chaque lot : propose le diff, STOP ➜ validation ➜ applique ➜ npm test.

ÉTAPE 4 — TRANSACTIONS MULTI‑TABLES (SQL/RPC)
Nous voulons des transactions futures. Prépare le mécanisme :

Créer un dossier supabase/sql/ ou supabase/migrations/ (si déjà utilisé).

Proposer un modèle de fonction SQL (PL/pgSQL) pour transaction :

sql
Copier
Modifier
create or replace function public.create_service_with_log(
  p_user_id uuid,
  p_service_type text,
  p_details text
)
returns table(id uuid, created_at timestamptz) as $$
declare
  v_order_id uuid;
begin
  -- 1. insert into service_orders
  insert into service_orders(id, user_id, service_type, details)
  values (gen_random_uuid(), p_user_id, p_service_type, p_details)
  returning id, created_at into v_order_id, created_at;
  
  -- 2. insert into activity_log
  insert into activity_log(user_id, action, meta)
  values (p_user_id, 'SERVICE_ORDER_CREATED', jsonb_build_object('service_type', p_service_type));

  return query select v_order_id, created_at;
end; $$ language plpgsql security definer;
On appellera ces fonctions via supabaseAdmin.rpc('create_service_with_log', {...}).

➡️ Propose 1 fonction RPC d’exemple + où la stocker (SQL file) et comment l’appeler (helper).
STOP ➜ validation.
(On appliquera vraiment les fonctions quand on en aura besoin.)

ÉTAPE 5 — TESTS & MOCKS
Adapter Jest pour mocker @supabase/supabase-js :

Dans jest.setup.ts ou un mock file, créer un mock createClient qui renvoie un objet avec .from().select/insert/update mockés.

Mettre à jour les tests existants (remplacer mocks Neon).

Vérifier que tous les tests passent (Lot A→D déjà verts).

➡️ Propose un diff jest.setup.ts + un exemple de mock. STOP ➜ validation ➜ appliquer ➜ npm test.

ÉTAPE 6 — NETTOYAGE
Supprimer :

Dépendances : @neondatabase/serverless, drizzle-orm (si plus utilisé), pg…

Fichiers : drizzle.config.ts, migrations drizzle, etc. (si abandon total).

Env Neon (DATABASE_URL…) si plus besoin.

Mettre à jour package.json, scripts, README/LOCAL_DEV_GUIDE.

➡️ Propose diff package.json + suppressions. STOP ➜ validation ➜ appliquer ➜ npm install ➜ tests.

ÉTAPE 7 — RÉCAP FINAL
Vérifier npm run dev (serveur OK, env Supabase OK).

Donne un résumé :

Fichiers modifiés/supprimés

Env à configurer (dev/préprod/prod)

TODO (RLS, policies, RPC supplémentaires)

────────────────────────────────────────
⚠️ CONTRAINTES

Pas de refactor massif (>50 lignes/fichier) sans mon accord.

Pas de nouvelles deps lourdes sans proposition.

Typescript strict.

Aucun appel réseau réel dans les tests (Supabase mocké).

Ne touche pas aux lots validés (auth, subscriptions, downloads, service orders) au-delà de la migration DB.

✅ SORTIE ATTENDUE

Diffs clairs, petits, validés à chaque étape.

Tests 100 % verts.

Plus de Neon. Supabase fully in place.

Migrations SQL prêtes (fichiers .sql).

Helpers et endpoints fonctionnels.

────────────────────────────────────────
🚦 COMMENCE MAINTENANT
Passe à l’ÉTAPE 1 :

Propose les vars env à ajouter + diff server/lib/supabaseAdmin.ts (et supabaseClient.ts si utile).

STOP ➜ attends validation.