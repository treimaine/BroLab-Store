“Build a complete modern web frontend for my WordPress-based beats store. Use a React-based stack (e.g. Next.js or React with Vite) that can be deployed on a standard cPanel host (static files or Node.js). The site should act as a headless client for my WordPress site (https://brolabentertainment.com), pulling in all content via REST APIs. Features to implement:
Data Integration: Fetch and display content from WordPress: use the WP REST API to get pages (About, Contact, etc.) and blog posts, and use the WooCommerce REST API to get all products (beats), categories, prices, and media (images/audio previews). Ensure API keys or auth are handled securely for WooCommerce endpoints.
Beats Catalog: Create a “Beats” shop page listing all beat products in a grid. Include filters by genre, mood, price, etc., and a search bar so users can find beats easily (like drumify/cymatics examples). Each item shows title, price, and a thumbnail.
Product Page: For each beat, build a detailed page. Show the beat’s title, description, cover art, and an audio player to preview the beat. List the available licensing options (e.g. Basic MP3, WAV, Unlimited, Exclusive) with their prices, and allow the user to select an option. An Add to Cart button adds the beat (with the chosen license) to the shopping cart.
Shopping Cart: Implement a cart that stores selected items. It can be managed on the client side (in React state/localStorage). Users should be able to review items, change quantity or license, and remove items. Display the subtotal and any discount (for example, if we have promotions like “20% off after $100”). Keep the cart state persistent across page reloads (e.g., use localStorage).
Checkout: Build a checkout page where users enter billing details and make payment. Integrate Stripe payments (using Stripe API/SDK) to process credit card payments securely on the site. On form submission, create an order via WooCommerce REST API (include customer info and line items from the cart). If the order and payment succeed, show an order confirmation with details (and consider triggering WooCommerce to email a receipt). If possible, allow guest checkout without requiring account creation.
UI/UX: The design should be clean, modern, and fully responsive (mobile-first design that scales up to desktop)
toptal.com
. Take inspiration from drumify.com and cymatics.fm – use bold visuals and a dark-themed professional look. Use a framework like Tailwind CSS for rapid responsive styling. Implement an intuitive navigation bar with links to Home, Shop/Beats, About, Contact, etc., and a cart icon showing the number of items. Include a footer with links to pages like FAQ, Licensing, Terms, and social media. Make sure the site looks good and is easy to use on phones, tablets, and desktops.
Must-Have Pages: Create all essential pages: Home (feature new or popular beats, banner, maybe testimonials), Shop/Beats (product grid with filters), Product Detail pages for each beat, Cart, Checkout, About Us (content about my brand), Contact/Support (with a contact form or email info), FAQ/Licensing (explain beat license terms and common questions). Also include user account pages like Login/Signup and Downloads/Account section if possible – so customers who have accounts on the WordPress site can log in and see their purchased beats or download links (this can use JWT auth with WordPress). If implementing accounts is too complex, you can skip account management for now, but structure the code to add it later.
Additional Features: Implement an email newsletter signup (pop-up or section) to capture user emails (for marketing free samples or updates, as cymatics.fm does with freebies). Include any promotional banner (e.g. “Spend $100 to get 20% off” loyalty incentive)
drumify.com
. Ensure the audio player is functional on all devices (use HTML5 Audio or a library so that iOS/Android can play previews). The site should be fast – use lazy loading for images and code-splitting if using a framework.
Overall, make the website visually appealing to music producers and artists, easy to navigate, and integrated in real-time with my WordPress/WooCommerce content. The end result should be a fully functional front-end that I can deploy on my o2switch cPanel hosting and that will use my WordPress site as the content and e-commerce backend.”