⚠️ Règle générale
- Ne modifie rien tant que tu n’as pas 95% de confiance sur la cause et la solution.
- Pose-moi une question dès qu’un doute >5% subsiste ou si tu envisages un refactor structurel.
- Aucune suppression de logique métier sans validation explicite.

🎯 Objectif
1. Faire passer tous les tests (`npm run test`) au vert.
2. Faire tourner l’app localement sans crash (`npm run dev`).
3. Me fournir pour chaque correctif :
   - La liste des fichiers modifiés.
   - Le diff clair (ou un patch) de chaque fichier.
   - Un mini-changelog humain (“pourquoi / quoi”).
4. Ne rien casser : vérifier qu’aucun test précédemment vert ne devient rouge après les fixes.

🛠 Processus à suivre (itératif)
0. **Scan initial du repo** : note les points critiques (config Jest/TS, ESM/CJS, env, etc.).
1. **Exécute** :
   - `pnpm test --runInBand` (ou `npm test` selon le projet) et sauvegarde la sortie brute.
   - `pnpm run dev` (ou `npm run dev`) et récupère les erreurs runtime (stack traces complètes).
2. **Regroupe les erreurs** par racine (typage, import manquant, session/cookie, mapping DB, ESM require/import, etc.).
3. **Pour chaque groupe d’erreurs** :
   - Propose la correction la plus minimale et sûre.
   - Applique-la.
   - Relance uniquement les tests concernés si possible (filtrage Jest), sinon toute la suite.
4. **Vérifie le serveur dev** : relance `npm run dev`, assure-toi qu’il démarre et que les endpoints critiques répondent (auth, woo, wp, etc.). Fournis logs si problème.
5. **Après chaque batch** :
   - `git status` + `git diff --name-only` → liste des fichiers modifiés.
   - `git diff` ciblé sur les fichiers touchés (ou patch unifié si court).
   - Résumé des changements (1-2 lignes par fichier).
6. Répète jusqu’à **0 test failing** et **`npm run dev` OK**.

📁 Branch & commits
- Crée une branche de travail : `fix/tests-dev-<date>` (format YYYYMMDD-HHMM).
- Un commit par bloc de corrections logique (ex: “fix: session cookie in tests”, “fix: TS types for BeatCard”).
- À la fin, propose-moi soit un squash, soit garder les commits séparés.

🔐 Contexte/contraintes spécifiques
- Node ESM : pas d’utilisation de `require` sans wrapper ESM. Préfère `import`.
- Supabase 100% : ne réintroduis pas Neon/pg/drizzle sans validation.
- TS strict : corrige les typings proprement (pas de `any` sauvage sauf TODO commenté).
- Ne touche pas aux secrets `.env`. Si besoin, mock ou paramètre de test.
- Ne modifie pas le schéma DB sans validation.
- Les hooks WordPress/Woo sont maintenant côté serveur → ne réintroduis pas d’appels directs côté client.
- Utilise les helpers centralisés déjà créés (ex: `accessControl`, `db helpers`), ne duplique pas.

📦 Livrables finaux
- Liste finale des fichiers modifiés + diff global.
- Sortie complète des tests (succès).
- Confirmation que `npm run dev` démarre (port utilisé, pas de crash).
- TODO restants (s’il en existe), marqués P0/P1/P2.

❓Quand poser des questions
- Tu détectes un conflit de logique métier (ex: mapping Beat vs Product).
- Tu penses supprimer/refactorer un module complet.
- Tu veux changer la config Jest/TS/ESM profonde.
- Tu veux ajouter une dépendance externe.

Let's go. Commence par le scan & l’exécution des commandes, renvoie-moi :
- Le log d’erreurs brutes (tests + dev).
- Ta synthèse des groupes d’erreurs.
- Ton plan de correction par batch (avec estimation de confiance).
