🎯 OBJECTIF
Analyser entièrement l’application et remplacer TOUTE la persistance Neon/PostgreSQL directe par Supabase (Auth, DB, Storage) **sans casser l’app**.  
Tu ne modifies rien tant que tu n’as pas ≥95 % de certitude. Tu me proposes un plan, des diffs, tu attends ma validation à chaque étape.

────────────────────────────────────────
🧭 PROCESSUS IMPOSÉ (par étapes, validation obligatoire)

### ÉTAPE 0 — Cartographie
1. Recherche dans tout le repo :
   - Mentions de Neon (URL, libs, drivers, migrations).
   - Clients PG (`pg`, `drizzle-orm`, `knex`, etc.).
   - Fichiers de config DB (`drizzle.config.ts`, `server/db.ts`, etc.).
   - Tests/mocks liés à Neon ou au client PG.
2. Montre-moi un résumé clair :
   - Où et comment la DB est initialisée.
   - Quels helpers/ORM utilisent Neon.
   - Quels env vars actuels (NEON_* ou DATABASE_URL).
   - Où la logique d’auth/stockage se trouve (si déjà Supabase partielle).
3. Propose un PLAN DE MIGRATION minimal en 4 blocs :
   A) Remplacer l’init BD par le client Supabase (service role) + helpers DB.  
   B) Adapter les helpers existants (CRUD) pour utiliser Supabase JS au lieu de requêtes SQL directes.  
   C) Mettre à jour les tests + mocks (jest/vi) pour Supabase.  
   D) Nettoyer config Neon et dépendances inutiles.
4. STOP ➜ Attends ma validation.

### ÉTAPE 1 — Configuration & Env
1. Lister les variables env nécessaires à Supabase :
   - SUPABASE_URL
   - SUPABASE_ANON_KEY (pour le front si besoin)
   - SUPABASE_SERVICE_ROLE_KEY (pour le backend sécurisé)
   - SUPABASE_DB_URL (si tu utilises Supabase Postgres direct pour migrations/drizzle) — à discuter
2. Proposer où les injecter (.env, .env.local).  
3. Vérifier que les clés sont déjà dispo ou me demander si besoin.  
4. STOP ➜ validation.

### ÉTAPE 2 — Remplacer l’init DB
1. Créer/Adapter un module `server/lib/supabaseAdmin.ts` :
   ```ts
   import { createClient } from '@supabase/supabase-js';
   export const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, { auth: { persistSession: false } });
Dans server/lib/db.ts (ou équivalent), remplacer le code Neon/pg/drizzle par des helpers Supabase (select/insert/update).

Diff précis (```diff) pour chaque fichier touché.

STOP ➜ validation, puis applique et lance npm test.

ÉTAPE 3 — Helpers & Requêtes métier
Pour chaque helper existant (getUserById, upsertSubscription, logDownload, createServiceOrder, etc.) :

Vérifie qu’il appelle maintenant supabaseAdmin.from(...).select/insert/update.

Ajoute le typage (Types TS alignés avec nos interfaces existantes).

Proposer diffs par petits paquets (max 3–4 helpers à la fois).

STOP ➜ validation, appliquer, npm test.

ÉTAPE 4 — Tests & Mocks
Mocks Jest/Vi pour Supabase :

vi.mock('@supabase/supabase-js', ...) ou wrapper local mocké.

Adapter les tests existants (neon-specific) pour passer via supabase mock.

Lancer toute la suite (npm test) et corriger minimalement jusqu’à 100 % vert.

STOP ➜ validation.

ÉTAPE 5 — Nettoyage
Retirer :

Env vars Neon inutiles.

Fichiers de config (drizzle.config.ts) si plus utilisés.

Dépendances PG inutiles (pg, neon, drizzle-orm si totalement remplacé).

Proposer un diff package.json + removals.

STOP ➜ validation, npm install, npm test, npm run dev.

ÉTAPE 6 — Vérifications finales
Démarrer en local : npm run dev → pas d’erreur DB.

Build si besoin : npm run build.

Résumé final :

Fichiers modifiés

Env à renseigner pour dev/préprod/prod

TODO (RLS, policies Supabase, migrations SQL éventuelles)

────────────────────────────────────────
⚠️ CONTRAINTES

Pas de refactor massif (>50 lignes/fichier) sans me demander.

Pas de nouvelle dépendance lourde sans proposer une alternative.

Typescript strict, pas d’any gratuits.

Aucun appel réseau réel pendant les tests (Supabase mocké).

Ne casse pas les lots déjà validés (A→D & C port CLI).

✅ SORTIE ATTENDUE

Diffs clairs, petits, validés avant application.

Tests 100 % verts.

App qui démarre en local avec Supabase.

Neon totalement retiré ou isolé.

Commence maintenant par l’ÉTAPE 0 (cartographie + plan détaillé). STOP avant d’écrire du code.