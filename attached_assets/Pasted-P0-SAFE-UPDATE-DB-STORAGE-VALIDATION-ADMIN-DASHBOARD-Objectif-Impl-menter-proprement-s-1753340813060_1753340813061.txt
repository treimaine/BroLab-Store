P0 SAFE-UPDATE — DB / STORAGE / VALIDATION / ADMIN DASHBOARD  
Objectif : Implémenter proprement (sans régression)  
1) Schéma Base de Données (réservations / commandes / fichiers)  
2) Intégration Supabase Storage (gestion fichiers)  
3) Validation côté serveur (tous formulaires & uploads)  
4) Dashboard Admin (gestion réservations, commandes, clients & fichiers)

⚠️ RÈGLES DE SÉCURITÉ (95% confiance)  
- NE TOUCHE PAS à main. Crée une branche : p0-safe-update-$(date +%Y%m%d%H%M)  
- ≤ 30 lignes modifiées par fichier (sinon STOP, pose une question)  
- Après CHAQUE micro-lot :  
  a) pnpm tsc --noEmit  
  b) pnpm test  
  c) Lancement script quick_check.sh (si présent)  
  d) Rapport bref + score de confiance  
- Si confiance < 95% → STOP & question  
- Toujours maintenir l’intégrité des fichiers existants (configs, scripts, tests)  
- Mettre à jour .env.example, MISSING_FEATURES.md, AUDIT_SUMMARY.md à la fin de chaque bloc

────────────────────────────────────────
ÉTAPE 0 — CARTOGRAPHIE & PLAN DÉTAILLÉ  
1. Scanner le code : tables existantes (Supabase), endpoints, helpers db, services mail, storage actuel.  
2. Vérifier si “reservations/service_orders” existent déjà (server/lib/db.ts). Cartographier gaps :  
   - Réservation (booking type ?), Commandes (déjà en place ?), Fichiers livrables (stems, invoices).  
3. Vérifier intégration Supabase Storage (buckets, policies RLS).  
4. Lister formulaires côté client + endpoints côté serveur → mesurer validation côté serveur.  
5. Vérifier s’il existe déjà un /admin (ou route protégée) → cartographier.  
6. Proposer un PLAN en micro-lots :  
   DB-SCHEMA-01… STORAGE-01… VALIDATION-01… ADMIN-01… etc.  
   Pour chaque lot : fichiers impactés, diff estimé (<30 lignes/fichier), tests à ajouter.  
STOP et affiche ce plan + variables env à ajouter.

────────────────────────────────────────
ÉTAPE 1 — DB-SCHEMA (Supabase)  
But : Créer/compléter 3 tables + vues si besoin :  
- reservations (ou service_orders)  
- orders (si manquante / à compléter)  
- files (fichiers livrés / uploadés) + file_links (optionnel)  

Proposition SQL (à ADAPTER après scan) – à exécuter via Supabase SQL ou drizzle migration (mais ne l’applique pas sans STOP) :  
```sql
-- MIGRATION: 01_create_reservations.sql
create table if not exists reservations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete set null,
  service_type text not null, -- 'mixing' | 'mastering' | 'custom_beat' ...
  details jsonb not null default '{}',
  status text not null default 'pending', -- pending|in_progress|delivered|canceled
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- MIGRATION: 02_create_files.sql
create table if not exists files (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete cascade,
  reservation_id uuid references reservations(id) on delete set null,
  order_id uuid references orders(id) on delete set null,
  storage_path text not null,
  mime_type text,
  size_bytes bigint,
  role text not null default 'deliverable', -- 'upload'|'deliverable'|'invoice'
  created_at timestamptz not null default now()
);

-- Example update for orders if needed
-- alter table orders add column ...
RLS (à générer) :

sql
Copier
Modifier
alter table reservations enable row level security;
create policy "own_reservations" on reservations
  for select using (auth.uid() = user_id);
-- insert/update policies similarly

alter table files enable row level security;
create policy "own_files" on files
  for select using (auth.uid() = owner_id);
STOP après génération des migrations + policies, montre le diff, demande validation.

────────────────────────────────────────
ÉTAPE 2 — STORAGE (Supabase Storage)

Créer (si absent) les buckets :

user-uploads (public=false)

deliverables (public=false)

invoices (public=false)

Générer policies Storage (private, lecture seulement par owner/admin).

Créer helper server/lib/storage.ts :

uploadUserFile(userId, file, bucket, path)

getSignedUrl(bucket, path, expiresIn)

deleteFile(bucket, path)

Intégrer ces helpers dans les endpoints d’upload/delivery (si inexistants, créer /api/files/upload, /api/files/:id/signed-url).

Ajouter validation (voir étape 3) et contrôles MIME/size.

STOP → tsc/test/rapport.

────────────────────────────────────────
ÉTAPE 3 — VALIDATION CÔTÉ SERVEUR

Choisir Zod (déjà présent ?) ou valider via schema.ts.

Pour chaque formulaire/endpoint :

/api/service-orders (reservations)

/api/files/upload

/api/subscription/...

/api/auth/...
Créer schema Zod : ex reservationSchema, fileUploadSchema, etc.

Injecter dans routes (middleware validateBody(schema)).

Ajouter tests intégration Jest (400 si invalide).

STOP → tsc/test/rapport.

────────────────────────────────────────
ÉTAPE 4 — ADMIN DASHBOARD (MVP)

Back-end :

Route /api/admin/* (auth admin only)

Endpoints : listReservations, listOrders, listFiles, updateStatus

Vérifier middleware isAdmin

Front-end :

/admin (React) minimal : table reservations, orders, files (pagination).

Utiliser composants existants (DataTable), sinon simple table + fetch.

Tests : auth 401/403, rendu minimal.

STOP → tsc/test/rapport.

────────────────────────────────────────
ÉTAPE 5 — DOCS & CLEANUP

Mettre à jour MISSING_FEATURES.md (marquer ces P0 comme DONE/WIP).

Ajouter DB_SCHEMA.md + STORAGE_SETUP.md si non existants.

Mettre à jour .env.example (SUPABASE_STORAGE_BUCKETS, etc.).

Générer un script script/post_update_check.ts pour revérifier :

TS OK

Jest OK

quick_check.sh OK

Zip export test (sans node_modules) : scripts/make_export.sh

FIN — STOP avant merge sur main, attendre mon GO.