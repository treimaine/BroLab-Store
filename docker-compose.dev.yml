version: "3.8"

services:
  # BroLab Entertainment - Full-stack development environment
  # The application uses Convex as the primary database (cloud-hosted)
  # and integrates with WordPress/WooCommerce for product management

  # Development web server (Express + Vite)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: brolab_app_dev
    ports:
      - "5000:5000" # Express server
      - "5173:5173" # Vite dev server (if running separately)
    environment:
      - NODE_ENV=development
      - PORT=5000
      - CONVEX_DEPLOYMENT=${CONVEX_DEPLOYMENT}
      - VITE_CONVEX_URL=${VITE_CONVEX_URL}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
      - WOOCOMMERCE_API_URL=${WOOCOMMERCE_API_URL}
      - WOOCOMMERCE_CONSUMER_KEY=${WOOCOMMERCE_CONSUMER_KEY}
      - WOOCOMMERCE_CONSUMER_SECRET=${WOOCOMMERCE_CONSUMER_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - VITE_STRIPE_PUBLIC_KEY=${VITE_STRIPE_PUBLIC_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    volumes:
      - .:/app
      - /app/node_modules
      - ./attached_assets:/app/attached_assets
    working_dir: /app
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - full-stack

  # Optional: Redis for caching (currently using in-memory cache)
  # Uncomment if you want to implement Redis caching
  redis:
    image: redis:7-alpine
    container_name: brolab_redis_dev
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    profiles:
      - caching

  # Optional: PostgreSQL for legacy data (currently using Convex)
  # Uncomment if you need local PostgreSQL for testing
  postgres:
    image: postgres:15-alpine
    container_name: brolab_postgres_dev
    environment:
      POSTGRES_USER: brolab_user
      POSTGRES_PASSWORD: brolab_password
      POSTGRES_DB: brolab_beats_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brolab_user -d brolab_beats_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - legacy-db

  # Optional: ClamAV for file scanning (not currently implemented)
  # Uncomment when implementing file upload security
  clamav:
    image: clamav/clamav:latest
    container_name: brolab_clamav_dev
    ports:
      - "3310:3310"
    restart: unless-stopped
    volumes:
      - clamav_data:/var/lib/clamav
    environment:
      - CLAMD_HOST=0.0.0.0
      - CLAMD_PORT=3310
    profiles:
      - security

  # Optional: Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: brolab_mailhog_dev
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    restart: unless-stopped
    profiles:
      - email-testing

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clamav_data:
    driver: local

networks:
  default:
    name: brolab_network
    driver: bridge
